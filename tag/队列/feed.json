{
    "version": "https://jsonfeed.org/version/1",
    "title": "雪漫城的风宅 • All posts by \"队列\" tag",
    "description": "この世界は好都合に未完成 だから知りたいんだ —— チ。-地球の運動について-",
    "home_page_url": "https://nightingalewk.cn",
    "items": [
        {
            "id": "https://nightingalewk.cn/2022/12/14/52.%20%E5%8F%91%E8%B5%B7%20laravel%20%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88/",
            "url": "https://nightingalewk.cn/2022/12/14/52.%20%E5%8F%91%E8%B5%B7%20laravel%20%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88/",
            "title": "发起 laravel 队列任务不生效",
            "date_published": "2022-12-14T08:48:00.000Z",
            "content_html": "<p>当确定你的代码都没问题，而且队列都在运行，而且是你变动了 job 文件，那很有可能是缓存原因导致的，清理一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan cache:clear &amp;&amp; php artisan config:clear &amp;&amp; php artisan route:clear &amp;&amp; php artisan view:clear</span><br></pre></td></tr></table></figure>\n<p>若是在 laravel sail 开发环境中，修改一下即可使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sail artisan cache:clear &amp;&amp; sail artisan config:clear &amp;&amp; sail artisan route:clear &amp;&amp; sail artisan view:clear</span><br></pre></td></tr></table></figure>\n\n<p>花式清理后就好了</p>\n",
            "tags": [
                "debug",
                "队列",
                "redis"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2022/12/09/51.%20%E5%9C%A8%20laravel%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis%20%E9%98%9F%E5%88%97/",
            "url": "https://nightingalewk.cn/2022/12/09/51.%20%E5%9C%A8%20laravel%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis%20%E9%98%9F%E5%88%97/",
            "title": "在 laravel 中使用 redis 队列",
            "date_published": "2022-12-09T08:04:00.000Z",
            "content_html": "<p>我们实现的效果为：将一些业务逻辑转化为任务（job），然后启用队列功能，而且是 redis 的队列，同时使用 laravel 官方扩展 Horizon 实现队列的监控。将复杂耗时的工作后台处理，提高前台用户的使用体验。</p>\n<h2 id=\"1-安装-redis\"><a href=\"#1-安装-redis\" class=\"headerlink\" title=\"1. 安装 redis\"></a>1. 安装 redis</h2><p>注意不要使用国内 composer 源，官方的是最全最新的（什么阿里云镜像源反向升级了解一下）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require predis/predis</span><br></pre></td></tr></table></figure>\n<p>修改环境变量 QUEUE_CONNECTION 的值为 redis，并指定我们将使用 predis 作为请求 Redis 的类库：</p>\n<p>.env</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">QUEUE_CONNECTION=redis</span><br><span class=\"line\">REDIS_CLIENT=predis</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-生成任务类\"><a href=\"#2-生成任务类\" class=\"headerlink\" title=\"2. 生成任务类\"></a>2. 生成任务类</h2><p>使用以下 Artisan 命令来生成一个新的队列任务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php artisan make:job EnterpriseExport</span><br></pre></td></tr></table></figure>\n<p>该命令会在 app&#x2F;Jobs 目录下生成一个新的类：</p>\n<p>app&#x2F;Jobs&#x2F;EnterpriseExport.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Jobs;</span><br><span class=\"line\"></span><br><span class=\"line\">use App\\Admin\\Controllers\\Api\\StaticFun;</span><br><span class=\"line\">use App\\Models\\Asset;</span><br><span class=\"line\">use Illuminate\\Bus\\Queueable;</span><br><span class=\"line\">use Illuminate\\Contracts\\Queue\\ShouldBeUnique;</span><br><span class=\"line\">use Illuminate\\Contracts\\Queue\\ShouldQueue;</span><br><span class=\"line\">use Illuminate\\Foundation\\Bus\\Dispatchable;</span><br><span class=\"line\">use Illuminate\\Queue\\InteractsWithQueue;</span><br><span class=\"line\">use Illuminate\\Queue\\SerializesModels;</span><br><span class=\"line\">use Illuminate\\Support\\Facades\\DB;</span><br><span class=\"line\"></span><br><span class=\"line\">class GetAssetsRemainDate implements ShouldQueue, ShouldBeUnique</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Create a new job instance.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Execute the job.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function handle()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 拿到全部资产信息</span><br><span class=\"line\">        $assets = Asset::all();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 开始循环计算资产剩余质保时间并更新</span><br><span class=\"line\">        foreach ($assets as $key =&gt; $value) &#123;</span><br><span class=\"line\">            // 计算</span><br><span class=\"line\">            $warranty_info = StaticFun::get2DateInfo($value-&gt;warranty_start, $value-&gt;warranty_end);</span><br><span class=\"line\">            // 拿取</span><br><span class=\"line\">            $warranty_remain = $warranty_info[&#x27;warranty_remain&#x27;];</span><br><span class=\"line\">            // 更新写入</span><br><span class=\"line\">            DB::table(&#x27;asset&#x27;)-&gt;where(&#x27;id&#x27;, $value-&gt;id)-&gt;update([&#x27;warranty_remain&#x27; =&gt; $warranty_remain]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>还有一点需要注意，我们将会在模型监控器中分发任务，任务中要避免使用 Eloquent 模型接口调用，如：create(), update(), save() 等操作。否则会陷入调用死循环 —— 模型监控器分发任务，任务触发模型监控器，模型监控器再次分发任务，任务再次触发模型监控器… 死循环。在这种情况下，使用 DB 类直接对数据库进行操作即可。</p>\n<h2 id=\"3-任务分发\"><a href=\"#3-任务分发\" class=\"headerlink\" title=\"3. 任务分发\"></a>3. 任务分发</h2><p>前往控制器或者观察者，去插入这项任务。</p>\n<p>SettingController.php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">class SettingController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 展示</span><br><span class=\"line\">    public function index(Content $content)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $content</span><br><span class=\"line\">            -&gt;header(&#x27;系统设置&#x27;)</span><br><span class=\"line\">            -&gt;description(&#x27;亲自参与到系统的个性化管理&#x27;)</span><br><span class=\"line\">            -&gt;body(function (Row $row) &#123;</span><br><span class=\"line\">                $row-&gt;column(12, Setting::index());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 刷新资产质保剩余时间</span><br><span class=\"line\">    public function warrantyRefresh()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dispatch(new GetAssetsRemainDate);  &lt;-- HERE</span><br><span class=\"line\"></span><br><span class=\"line\">        return redirect(&#x27;/admin/setting&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-安装-Horizon\"><a href=\"#4-安装-Horizon\" class=\"headerlink\" title=\"4. 安装 Horizon\"></a>4. 安装 Horizon</h2><p>使用 Composer 安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer require laravel/horizon</span><br></pre></td></tr></table></figure>\n<p>安装完成后，使用 vendor:publish Artisan 命令发布相关文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php artisan vendor:publish --provider=&quot;laravel\\Horizon\\HorizonServiceProvider&quot;</span><br></pre></td></tr></table></figure>\n<p>分别是配置文件 config&#x2F;horizon.php 和存放在 public&#x2F;vendor&#x2F;horizon 文件夹中的 CSS 、JS 等页面资源文件。</p>\n<p>Horizon 是一个监控程序，需要常驻运行，我们可以通过以下命令启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php artisan horizon</span><br></pre></td></tr></table></figure>\n<p>至此安装完毕，浏览器打开 larabbs.test&#x2F;horizon 访问控制台</p>\n<h2 id=\"5-安装-Supervisor\"><a href=\"#5-安装-Supervisor\" class=\"headerlink\" title=\"5. 安装 Supervisor\"></a>5. 安装 Supervisor</h2><p>Supervisor 是一个用于 Linux 操作系统的进程监视器。如果 Horizon 进程被退出或终止，Supervisor 将自动重启你的 Horizon 进程。如果要在 Ubuntu 上安装 Supervisor，你可以使用以下命令。如果你不使用 Ubuntu，也可以使用操作系统的包管理器安装 Supervisor：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-配置-Supervisor\"><a href=\"#6-配置-Supervisor\" class=\"headerlink\" title=\"6. 配置 Supervisor\"></a>6. 配置 Supervisor</h2><p>Supervisor 配置文件通常存储在 &#x2F;etc&#x2F;supervisor&#x2F;conf.d 目录下。在此目录中，你可以创建任意数量的配置文件，这些配置文件会告诉 supervisor 如何监视你的进程。例如，让我们创建一个 horizon.conf 文件，它启动并监视一个 horizon 进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:horizon]</span><br><span class=\"line\">process_name=%(program_name)s</span><br><span class=\"line\">directory=/data/wwwroot/yanji.wkarrow.top</span><br><span class=\"line\">command=/usr/local/php/bin/php artisan horizon</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">user=root</span><br><span class=\"line\">stopasgroup=true</span><br><span class=\"line\">killasgroup=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/data/wwwroot/yanji.wkarrow.top/horizon.log</span><br><span class=\"line\">stopwaitsecs=3600</span><br></pre></td></tr></table></figure>\n<p>注意：要确保 stopwaitsecs 的值大于运行时间最长的任务所消耗的秒数。否则，Supervisor 可能会在工作完成前终止任务。<br>注意：编辑文件之前，请使用 root 权限进行操作，否则无法保存（针对 homestead 环境下的操作）</p>\n<h2 id=\"7-启动-Supervisor\"><a href=\"#7-启动-Supervisor\" class=\"headerlink\" title=\"7. 启动 Supervisor\"></a>7. 启动 Supervisor</h2><p>在将新代码部署到服务器时，你需要终止 Horizon 主进程，以便进程监视器重新启动它并接收代码的更改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan horizon:terminate</span><br></pre></td></tr></table></figure>\n<p>创建了配置文件后，可以使用以下命令更新 Supervisor 配置并启动进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo supervisorctl reread</span><br><span class=\"line\"></span><br><span class=\"line\">sudo supervisorctl update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo supervisorctl start horizon</span><br></pre></td></tr></table></figure>",
            "tags": [
                "队列",
                "redis"
            ]
        }
    ]
}