{
    "version": "https://jsonfeed.org/version/1",
    "title": "雪漫城的风宅 • All posts by \"linux\" tag",
    "description": "この世界は好都合に未完成 だから知りたいんだ —— チ。-地球の運動について-",
    "home_page_url": "https://nightingalewk.cn",
    "items": [
        {
            "id": "https://nightingalewk.cn/2024/10/10/63.%20%E4%BB%8E%200%20%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%20LNMP%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/",
            "url": "https://nightingalewk.cn/2024/10/10/63.%20%E4%BB%8E%200%20%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%20LNMP%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/",
            "title": "从 0 开始部署 LNMP 生产环境",
            "date_published": "2024-10-10T01:00:00.000Z",
            "content_html": "<h2 id=\"前置准备工作\"><a href=\"#前置准备工作\" class=\"headerlink\" title=\"前置准备工作\"></a>前置准备工作</h2><p>本文章将指导您如何使用一台空白的云服务器（这里演示的是腾讯云的轻量服务器），在仅安装 ubuntu 24.04 操作系统的情况下，一步步完成 LNMP 环境的配置</p>\n<h2 id=\"1-初始化-root-账户密码\"><a href=\"#1-初始化-root-账户密码\" class=\"headerlink\" title=\"1. 初始化 root 账户密码\"></a>1. 初始化 root 账户密码</h2><p>一行指令即可实现，其中需要输入两次密码，自己要记住。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> passwd root</span><br></pre></td></tr></table></figure>\n\n<p>即便如此，这个 root 账户我们基本不用，但是初始化一下又没啥问题。</p>\n<h2 id=\"2-更新系统\"><a href=\"#2-更新系统\" class=\"headerlink\" title=\"2. 更新系统\"></a>2. 更新系统</h2><p>目的是确保系统的所有软件包都是最新的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update &amp;&amp; <span class=\"built_in\">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure>\n\n<p>其中，-y 是 apt upgrade 命令中的一个选项，它的作用是自动回答 “yes”（是） 以确认安装或升级过程中的所有提示。</p>\n<h2 id=\"3-安装-Nginx\"><a href=\"#3-安装-Nginx\" class=\"headerlink\" title=\"3. 安装 Nginx\"></a>3. 安装 Nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install nginx -y</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，可以使用以下命令检查 Nginx 是否已经正确启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl status nginx</span><br></pre></td></tr></table></figure>\n\n<p>访问服务器的 IP 地址（例如：<a href=\"http://your_server_ip),你应该能看到/\">http://your_server_ip），你应该能看到</a> Nginx 的默认页面。</p>\n<h2 id=\"4-安装-MySQL\"><a href=\"#4-安装-MySQL\" class=\"headerlink\" title=\"4. 安装 MySQL\"></a>4. 安装 MySQL</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install mysql-server -y</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，执行以下命令对 MySQL 进行安全性设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<p>完成后，登录 MySQL 检查：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mysql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-修改-MySQL-的认证机制从-auth-socket-插件认证改为密码验证\"><a href=\"#4-修改-MySQL-的认证机制从-auth-socket-插件认证改为密码验证\" class=\"headerlink\" title=\"4. 修改 MySQL 的认证机制从 auth_socket 插件认证改为密码验证\"></a>4. 修改 MySQL 的认证机制从 auth_socket 插件认证改为密码验证</h2><p>在新的 MySQL 版本中，root 用户默认使用 auth_socket 插件进行身份验证，这意味着只有在系统中以 root 或 sudo 权限运行的用户才可以登录 MySQL，而无需密码。</p>\n<p>但是这个机制不是我们需要的，如果不为 MySQL 的 root 用户设置密码，Laravel 将无法通过默认的 DB_USERNAME&#x3D;root 和 DB_PASSWORD 来连接到数据库。因为 Laravel 的数据库连接需要使用传统的用户名和密码进行身份验证，而不是通过 auth_socket 插件的方式。</p>\n<p>为了确保 Laravel 能够成功连接 MySQL 数据库，需要按照以下步骤操作：</p>\n<ol>\n<li>登录 MySQL：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mysql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查看 root 用户的身份验证插件：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">user</span>, host, plugin <span class=\"keyword\">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure>\n\n<p>检查 root 用户的 plugin 是否为 auth_socket。</p>\n<ol start=\"3\">\n<li>设置 root 用户的密码，并将身份验证插件更改为 mysql_native_password（或者 caching_sha2_password）：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;your_new_password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>或者使用 caching_sha2_password 插件：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> caching_sha2_password <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;your_new_password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>小课堂：MySQL 8.0 及之后的版本中，mysql_native_password 和 caching_sha2_password 是 MySQL 中两种不同的身份验证插件，它们在安全性和性能上有一定的区别。以下是它们的详细对比：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. mysql_native_password 插件</span><br><span class=\"line\">    - 概述：mysql_native_password 是 MySQL 较早版本（5.7 及以前）中的默认身份验证插件，它通过哈希算法（SHA1）加密用户密码，并用于验证用户身份。</span><br><span class=\"line\">    - 优点：</span><br><span class=\"line\">        - 兼容性好：与 MySQL 早期版本、PHP 及其他数据库驱动程序（如 PDO、MySQLi）都有很好的兼容性。</span><br><span class=\"line\">        - 配置简单：不需要额外的密码加密设置，容易理解和使用。</span><br><span class=\"line\">    - 缺点：</span><br><span class=\"line\">        - 安全性较低：使用 SHA1 作为哈希算法，而 SHA1 已被证明存在安全漏洞，因此使用该插件的密码容易受到彩虹表攻击和其他哈希破解技术的攻击。</span><br><span class=\"line\">    - 适用场景：</span><br><span class=\"line\">        - 与旧版本 MySQL 或旧版本客户端程序的兼容性需求。</span><br><span class=\"line\">        - 出于兼容性考虑，推荐在低风险环境或开发环境中使用。</span><br><span class=\"line\">2. caching_sha2_password 插件</span><br><span class=\"line\">    - 概述：caching_sha2_password 是 MySQL 8.0 及之后的默认身份验证插件，使用更安全的 SHA-256 哈希算法来加密密码，并带有密码缓存功能，可以提高身份验证的效率。</span><br><span class=\"line\">    - 优点：</span><br><span class=\"line\">        - 更高的安全性：SHA-256 比 SHA1 更强大，能够更好地抵御暴力破解和其他类型的密码攻击。</span><br><span class=\"line\">        - 提高性能：使用了客户端和服务器的身份验证缓存机制，可以减少重复身份验证时的性能开销，提升性能表现。</span><br><span class=\"line\">        - 加密连接：支持加密连接（TLS/SSL），在不安全的网络中也可以保证传输中的数据安全性。</span><br><span class=\"line\">    缺点：</span><br><span class=\"line\">        - 兼容性问题：由于 caching_sha2_password 是 MySQL 8.0 中引入的新插件，因此可能与旧版本的 MySQL 客户端和驱动程序不兼容。例如：一些旧版本的 PHP 和 MySQLi 扩展可能无法直接连接到使用 caching_sha2_password 插件的 MySQL 数据库。</span><br><span class=\"line\">    - 适用场景：</span><br><span class=\"line\">        - 强安全性需求：在生产环境中，推荐使用 caching_sha2_password 来确保数据安全性。</span><br><span class=\"line\">        - 高性能需求：由于缓存机制的存在，适用于高并发和频繁数据库访问的场景。</span><br><span class=\"line\"></span><br><span class=\"line\">在选择建议方面：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 兼容性优先时使用 mysql_native_password：</span><br><span class=\"line\">    - 如果你的 Laravel 项目、PHP 版本较旧（例如 PHP 7.x），或者使用了旧的 MySQL 客户端库（如 MySQLi），可能会遇到 caching_sha2_password 不兼容的问题。</span><br><span class=\"line\">    - 在这种情况下，可以选择 mysql_native_password 作为过渡解决方案，以保证 Laravel 项目能够正常连接到数据库。</span><br><span class=\"line\">2. 安全性优先时使用 caching_sha2_password：</span><br><span class=\"line\">    - 在生产环境中，如果你的 Laravel 项目、PHP 版本以及 MySQL 客户端均支持 MySQL 8.0 及以上，并且支持 caching_sha2_password 插件，建议使用该插件以提高密码安全性。</span><br><span class=\"line\">    - 另外，如果需要使用 SSL/TLS 加密的连接，也建议使用 caching_sha2_password。</span><br></pre></td></tr></table></figure>\n\n<p>这里我选择的是 <strong>caching_sha2_password</strong></p>\n<ol start=\"4\">\n<li>刷新权限表：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>退出 MySQL：</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>验证 root 密码是否生效</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-安装-PHP\"><a href=\"#5-安装-PHP\" class=\"headerlink\" title=\"5. 安装 PHP\"></a>5. 安装 PHP</h2><p>安装 PHP 及其扩展：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install php-fpm php-mysql php-cli php-xml php-mbstring php-curl php-zip php-gd php-imagick -y</span><br></pre></td></tr></table></figure>\n\n<p>截稿时最新版本为 8.3</p>\n<p>配置 PHP-FPM： 编辑 PHP 配置文件 php.ini：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/php/8.3/fpm/php.ini</span><br></pre></td></tr></table></figure>\n\n<p>确保以下参数值正确（如果没有则手动添加或修改）：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cgi.fix_pathinfo</span>=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">memory_limit</span> = <span class=\"number\">512</span>M</span><br><span class=\"line\"><span class=\"attr\">upload_max_filesize</span> = <span class=\"number\">50</span>M</span><br><span class=\"line\"><span class=\"attr\">post_max_size</span> = <span class=\"number\">50</span>M</span><br><span class=\"line\"><span class=\"attr\">max_execution_time</span> = <span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n\n<p>重启 PHP-FPM 服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart php8.3-fpm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-配置-Nginx-以支持-PHP\"><a href=\"#6-配置-Nginx-以支持-PHP\" class=\"headerlink\" title=\"6. 配置 Nginx 以支持 PHP\"></a>6. 配置 Nginx 以支持 PHP</h2><p>创建一个新的 Nginx 配置文件，或者修改默认的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> vim /etc/nginx/sites-available/laravel</span><br></pre></td></tr></table></figure>\n\n<p>在文件中添加以下内容（确保与 Laravel 项目目录匹配）：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> your_domain_or_ip;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /var/www/laravel/public;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.php?<span class=\"variable\">$query_string</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">include</span> snippets/fastcgi-php.conf;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_pass</span> unix:/var/run/php/php8.1-fpm.sock;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        <span class=\"attribute\">include</span> fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ /\\.ht</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">deny</span> all;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启用此配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -s /etc/nginx/sites-available/laravel /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure>\n\n<p>检查 Nginx 配置语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>重启 Nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-Composer\"><a href=\"#安装-Composer\" class=\"headerlink\" title=\"安装 Composer\"></a>安装 Composer</h2><p>全局安装 Composer：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sS https://getcomposer.org/installer | php</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mv</span> composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>\n\n<p>验证：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer --version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完事儿\"><a href=\"#完事儿\" class=\"headerlink\" title=\"完事儿\"></a>完事儿</h2><p>至此，一个崭新的 LNMP 环境就配置好了，下一篇文章我将继续介绍如何在此基础上部署一个 Laravel 项目。</p>\n",
            "tags": [
                "linux"
            ]
        }
    ]
}