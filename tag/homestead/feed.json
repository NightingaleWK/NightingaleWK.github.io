{
    "version": "https://jsonfeed.org/version/1",
    "title": "雪漫城的风宅 • All posts by \"homestead\" tag",
    "description": "この世界は好都合に未完成 だから知りたいんだ —— チ。-地球の運動について-",
    "home_page_url": "https://nightingalewk.cn",
    "items": [
        {
            "id": "https://nightingalewk.cn/2023/05/09/56.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E5%B0%86%20homestead%20%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0%20laravel%20sail%20%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/",
            "url": "https://nightingalewk.cn/2023/05/09/56.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E5%B0%86%20homestead%20%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0%20laravel%20sail%20%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/",
            "title": "（更新中）将 homestead 中的项目迁移到 laravel sail 中进行开发",
            "date_published": "2023-05-09T01:43:00.000Z",
            "content_html": "<p>本文的目的是：将原本跑 homestead 环境下的 laravel 项目，迁移到官方最新推荐的 laravel sail 开发环境中。下面我分享一下我的操作方法。</p>\n<p>在文章开始之前，我们默认大家均已拥有一个 homestead 开发环境，且你也是在其之上本地开发多次的开发者，而且你的需求是将你的 homestead 开发环境转换成 laravel sail，希望借助 docker 技术来提升系统的</p>\n<h2 id=\"1-项目克隆\"><a href=\"#1-项目克隆\" class=\"headerlink\" title=\"1. 项目克隆\"></a>1. 项目克隆</h2><p>首先我们你将线上仓库的代码clone到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:NightingaleWK/larabbs.git larabbs</span><br></pre></td></tr></table></figure>\n\n<p>然后我们启动 homestead ，并在 homestead 的 linux 环境中执行接下来的工作。</p>\n<p>我们先来到项目根目录复制一份 .env 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp .env.example .env</span><br><span class=\"line\"></span><br><span class=\"line\">vim .env</span><br><span class=\"line\"></span><br><span class=\"line\">// 编辑一下 .env 文件并保存</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-项目改造\"><a href=\"#2-项目改造\" class=\"headerlink\" title=\"2. 项目改造\"></a>2. 项目改造</h2><p>然后在已运行的应用中安装 Composer 依赖，以下指令执行后，其余未安装的以来也将一并安装，毕竟我们没有执行过 composer i 嘛</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require laravel/sail --dev</span><br></pre></td></tr></table></figure>\n\n<p>在 Sail 完成安装后，你可以运行 Artisan 命令 sail:install。这个命令将会发布 Sail 的 docker-compose.yml 文件到你应用程序的根目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan sail:install --with=mysql,redis</span><br></pre></td></tr></table></figure>\n\n<p>以上这一步的执行可能会花费很长时间，网上有很多修改相关配置的来提高速度，大家可以自己搜索，至于为什么我不用，那就是希望追求纯粹正统，composer 阿里云的源与官方源完全跟不上，composer u 执行完简直是反向升级，以后再也不相信国内的源了。</p>\n<p>然后我再说一下 with 后面的该怎么填写，你可以尝试执行不带 with 的命令，可以看到几个可选的选项，这些就是填写在 with 后面的内容，按需选择安装即可。</p>\n<p>上述步骤安装完毕会系统会提示 Sail build successful. 这就代表着这一阶段任务完成</p>\n<p>然后我们把项目推送到线上仓库</p>\n<h2 id=\"3-代码上传\"><a href=\"#3-代码上传\" class=\"headerlink\" title=\"3. 代码上传\"></a>3. 代码上传</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;ready for docker&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-代码部署\"><a href=\"#4-代码部署\" class=\"headerlink\" title=\"4. 代码部署\"></a>4. 代码部署</h2><p>然后我们回到我们的sail环境中，把最新的项目代码从仓库拉下来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:NightingaleWK/larabbs.git larabbs</span><br></pre></td></tr></table></figure>\n\n<p>之后我们也是重新配置 .env 文件</p>\n<p>然后我们执行 composer 命令，安装在 sail 环境下的依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm \\</span><br><span class=\"line\">    -u &quot;$(id -u):$(id -g)&quot; \\</span><br><span class=\"line\">    -v &quot;$(pwd):/var/www/html&quot; \\</span><br><span class=\"line\">    -w /var/www/html \\</span><br><span class=\"line\">    laravelsail/php82-composer:latest \\</span><br><span class=\"line\">    composer install --ignore-platform-reqs</span><br></pre></td></tr></table></figure>\n<p>这里与在 homestead 中不同的是，我们 sail 环境不包括 composer 命令，这个命令使用一个包含 PHP 与 Composer 的小型 Docker 容器进行应用程序依赖的安装。</p>\n<p>当你使用 laravelsail&#x2F;phpXX-composer 镜像时，你应该选择和你的应用程序所用环境相同的 PHP 版本（74、80、81 或 82）。</p>\n<h2 id=\"5-环境运行\"><a href=\"#5-环境运行\" class=\"headerlink\" title=\"5. 环境运行\"></a>5. 环境运行</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sail up -d</span><br><span class=\"line\"></span><br><span class=\"line\">// -d 表示后台运行，去掉那就是前台运行，需要 ctrl + c 来结束。加入带着 -d，那么我们退出的话则需要输入 sail down 来结束</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "homestead",
                "laravel sail"
            ]
        },
        {
            "id": "https://nightingalewk.cn/2021/06/08/22.%20Laravel%20%E9%A1%B9%E7%9B%AE%20Homestead%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "url": "https://nightingalewk.cn/2021/06/08/22.%20Laravel%20%E9%A1%B9%E7%9B%AE%20Homestead%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/",
            "title": "laravel 项目 Homestead 开发环境的搭建",
            "date_published": "2021-06-08T04:00:00.000Z",
            "content_html": "<h1 id=\"做好准备\"><a href=\"#做好准备\" class=\"headerlink\" title=\"做好准备\"></a>做好准备</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Homestead &amp;&amp; vagrant up</span><br><span class=\"line\">vagrant ssh</span><br></pre></td></tr></table></figure>\n<p>在虚拟机中进入 <code>code</code> 文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/code\t</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Composer-加速\"><a href=\"#Composer-加速\" class=\"headerlink\" title=\"Composer 加速\"></a>Composer 加速</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project laravel/laravel yourapp</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改-Hosts\"><a href=\"#修改-Hosts\" class=\"headerlink\" title=\"修改 Hosts\"></a>修改 Hosts</h1><p>首先找到 <code>Hosts</code> 文件，<code>Windows</code> 下是在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:/Windows/System32/Drivers/etc/hosts</span><br></pre></td></tr></table></figure>\n<p>文件成功打开后，在 <code>hosts</code> 文件最后面新增下面一行以完成设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.10.10   yourapp.test</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"新增站点\"><a href=\"#新增站点\" class=\"headerlink\" title=\"新增站点\"></a>新增站点</h1><p>进入 homestead 的根目录，找到 <code>Homestead.yaml</code> 并打开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">ip: &quot;192.168.10.10&quot;</span><br><span class=\"line\">memory: 2048</span><br><span class=\"line\">cpus: 2</span><br><span class=\"line\">provider: virtualbox</span><br><span class=\"line\"></span><br><span class=\"line\">authorize: ~/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">keys:</span><br><span class=\"line\">    - ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">folders:</span><br><span class=\"line\">    - map: ~/Code</span><br><span class=\"line\">      to: /home/vagrant/Code</span><br><span class=\"line\"></span><br><span class=\"line\">sites:</span><br><span class=\"line\">    - map: homestead.test</span><br><span class=\"line\">      to: /home/vagrant/Code/laravel/public</span><br><span class=\"line\">    - map: yourapp.test #  &lt;--- 这里</span><br><span class=\"line\">      to: /home/vagrant/Code/yourapp/public #  &lt;--- 这里</span><br><span class=\"line\"></span><br><span class=\"line\">databases:</span><br><span class=\"line\">    - homestead</span><br><span class=\"line\">    - yourapp #  &lt;--- 这里</span><br><span class=\"line\"></span><br><span class=\"line\">variables:</span><br><span class=\"line\">    - key: APP_ENV</span><br><span class=\"line\">      value: local</span><br><span class=\"line\"></span><br><span class=\"line\">features:</span><br><span class=\"line\">    - mysql: true</span><br><span class=\"line\"></span><br><span class=\"line\"># blackfire:</span><br><span class=\"line\">#     - id: foo</span><br><span class=\"line\">#       token: bar</span><br><span class=\"line\">#       client-id: foo</span><br><span class=\"line\">#       client-token: bar</span><br><span class=\"line\"></span><br><span class=\"line\"># ports:</span><br><span class=\"line\">#     - send: 93000</span><br><span class=\"line\">#       to: 9300</span><br><span class=\"line\">#     - send: 7777</span><br><span class=\"line\">#       to: 777</span><br><span class=\"line\">#       protocol: udp</span><br></pre></td></tr></table></figure>\n\n<p>这里主要设置了 <code>sites</code> 和 <code>databases</code> 两项。 <code>sites</code> 会将域名 <code>larabbs.test</code> 映射到虚拟机的 <code>/home/vagrant/Code/yourapp/public</code> 文件夹上，而 <code>databases</code> 则为新创建的项目指定数据库名</p>\n<h1 id=\"重启虚拟机\"><a href=\"#重启虚拟机\" class=\"headerlink\" title=\"重启虚拟机\"></a>重启虚拟机</h1><p>对 <code>Homestead.yaml</code> 文件进行了更改之后，需要运行下面命令来使其更改生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Homestead</span><br><span class=\"line\">vagrant provision</span><br><span class=\"line\">vagrant reload</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"env-修改\"><a href=\"#env-修改\" class=\"headerlink\" title=\".env 修改\"></a>.env 修改</h1><p>我们还需要对应用根目录下的 <code>.env</code> 文件进行设置，为应用指定数据库名称 <code>yourapp</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_NAME=yourapp</span><br><span class=\"line\">APP_ENV=local</span><br><span class=\"line\">APP_KEY=your_app_key</span><br><span class=\"line\">APP_DEBUG=true</span><br><span class=\"line\">APP_URL=http://yourapp.test</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">DB_DATABASE=yourapp</span><br><span class=\"line\">DB_USERNAME=homestead</span><br><span class=\"line\">DB_PASSWORD=secret</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<h1 id=\"统一代码风格\"><a href=\"#统一代码风格\" class=\"headerlink\" title=\"统一代码风格\"></a>统一代码风格</h1><p>对项目的 <code>.editorconfig</code> 进行统一修改。这是为了保证我们的代码风格一致，以避免引起不必要的歧义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 4</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*.md]</span><br><span class=\"line\">trim_trailing_whitespace = false</span><br><span class=\"line\"></span><br><span class=\"line\">[*.&#123;yml,yaml&#125;]</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\">[*.&#123;js,html,blade.php,css,scss,vue&#125;]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"访问应用\"><a href=\"#访问应用\" class=\"headerlink\" title=\"访问应用\"></a>访问应用</h1><p>在 Chrome 浏览器中打开 <code>yourapp.test</code> 即可</p>\n<h1 id=\"git-版本控制\"><a href=\"#git-版本控制\" class=\"headerlink\" title=\"git 版本控制\"></a>git 版本控制</h1><p>线上建立好仓库后，记住 ssh 方式连接的代码仓库名，在虚机的项目根目录下输入如下指令即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;初始化项目&quot;</span><br><span class=\"line\">git remote add origin git@e.coding.net:nightingalewk/yanji/yanji.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"git-分支的使用\"><a href=\"#git-分支的使用\" class=\"headerlink\" title=\"git 分支的使用\"></a>git 分支的使用</h1><p>分支使用时，首先执行如下指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git checkout -b static-pages</span><br></pre></td></tr></table></figure>\n\n<p>当写完一阶段的代码时，需要合并到主分支，需要如下操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &quot;完成静态页面的建立&quot;</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge static-pages</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<h1 id=\"启用-Bootstrap\"><a href=\"#启用-Bootstrap\" class=\"headerlink\" title=\"启用 Bootstrap\"></a>启用 Bootstrap</h1><p>项目中使用 Bootstrap 前端框架，需要先执行以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require laravel/ui --dev</span><br><span class=\"line\">php artisan ui bootstrap</span><br></pre></td></tr></table></figure>\n<p>开始安装之前，我们需要设置安装器来使用国内的淘宝镜像加速，加速镜像的原理是使用国内的 CDN 来下载所需代码包，会更加顺畅</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry=https://registry.npm.taobao.org</span><br><span class=\"line\">yarn config set registry &#x27;https://registry.npm.taobao.org&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>使用用 Yarn 对扩展包进行安装，请在项目根目录下运行以下命令进行安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SASS_BINARY_SITE=http://npm.taobao.org/mirrors/node-sass yarn --no-bin-links</span><br><span class=\"line\">yarn add cross-env --no-bin-links</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开发常用指令\"><a href=\"#开发常用指令\" class=\"headerlink\" title=\"开发常用指令\"></a>开发常用指令</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//清理各类缓存</span><br><span class=\"line\">php artisan cache:clear &amp;&amp; php artisan config:clear &amp;&amp; php artisan route:clear &amp;&amp; php artisan view:clear</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "homestead"
            ]
        }
    ]
}