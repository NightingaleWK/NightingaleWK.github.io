<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪漫城的风宅</title>
  
  <subtitle>聆听一段风雪与密酒的故事</subtitle>
  <link href="https://nightingalewk.github.io/atom.xml" rel="self"/>
  
  <link href="https://nightingalewk.github.io/"/>
  <updated>2024-10-11T02:49:44.429Z</updated>
  <id>https://nightingalewk.github.io/</id>
  
  <author>
    <name>NightingaleWK</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从 0 开始部署 LNMP 生产环境</title>
    <link href="https://nightingalewk.github.io/2024/10/10/63.%20%E4%BB%8E%200%20%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%20LNMP%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/"/>
    <id>https://nightingalewk.github.io/2024/10/10/63.%20%E4%BB%8E%200%20%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%20LNMP%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</id>
    <published>2024-10-10T01:00:00.000Z</published>
    <updated>2024-10-11T02:49:44.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置准备工作"><a href="#前置准备工作" class="headerlink" title="前置准备工作"></a>前置准备工作</h2><p>本文章将指导您如何使用一台空白的云服务器（这里演示的是腾讯云的轻量服务器），在仅安装 ubuntu 24.04 操作系统的情况下，一步步完成 LNMP 环境的配置</p><h2 id="1-初始化-root-账户密码"><a href="#1-初始化-root-账户密码" class="headerlink" title="1. 初始化 root 账户密码"></a>1. 初始化 root 账户密码</h2><p>一行指令即可实现，其中需要输入两次密码，自己要记住。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> passwd root</span><br></pre></td></tr></table></figure><p>即便如此，这个 root 账户我们基本不用，但是初始化一下又没啥问题。</p><h2 id="2-更新系统"><a href="#2-更新系统" class="headerlink" title="2. 更新系统"></a>2. 更新系统</h2><p>目的是确保系统的所有软件包都是最新的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure><p>其中，-y 是 apt upgrade 命令中的一个选项，它的作用是自动回答 “yes”（是） 以确认安装或升级过程中的所有提示。</p><h2 id="3-安装-Nginx"><a href="#3-安装-Nginx" class="headerlink" title="3. 安装 Nginx"></a>3. 安装 Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nginx -y</span><br></pre></td></tr></table></figure><p>安装完成后，可以使用以下命令检查 Nginx 是否已经正确启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status nginx</span><br></pre></td></tr></table></figure><p>访问服务器的 IP 地址（例如：<a href="http://your_server_ip),你应该能看到/">http://your_server_ip），你应该能看到</a> Nginx 的默认页面。</p><h2 id="4-安装-MySQL"><a href="#4-安装-MySQL" class="headerlink" title="4. 安装 MySQL"></a>4. 安装 MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install mysql-server -y</span><br></pre></td></tr></table></figure><p>安装完成后，执行以下命令对 MySQL 进行安全性设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql_secure_installation</span><br></pre></td></tr></table></figure><p>完成后，登录 MySQL 检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql</span><br></pre></td></tr></table></figure><h2 id="4-修改-MySQL-的认证机制从-auth-socket-插件认证改为密码验证"><a href="#4-修改-MySQL-的认证机制从-auth-socket-插件认证改为密码验证" class="headerlink" title="4. 修改 MySQL 的认证机制从 auth_socket 插件认证改为密码验证"></a>4. 修改 MySQL 的认证机制从 auth_socket 插件认证改为密码验证</h2><p>在新的 MySQL 版本中，root 用户默认使用 auth_socket 插件进行身份验证，这意味着只有在系统中以 root 或 sudo 权限运行的用户才可以登录 MySQL，而无需密码。</p><p>但是这个机制不是我们需要的，如果不为 MySQL 的 root 用户设置密码，Laravel 将无法通过默认的 DB_USERNAME&#x3D;root 和 DB_PASSWORD 来连接到数据库。因为 Laravel 的数据库连接需要使用传统的用户名和密码进行身份验证，而不是通过 auth_socket 插件的方式。</p><p>为了确保 Laravel 能够成功连接 MySQL 数据库，需要按照以下步骤操作：</p><ol><li>登录 MySQL：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql</span><br></pre></td></tr></table></figure><ol start="2"><li>查看 root 用户的身份验证插件：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>, host, plugin <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure><p>检查 root 用户的 plugin 是否为 auth_socket。</p><ol start="3"><li>设置 root 用户的密码，并将身份验证插件更改为 mysql_native_password（或者 caching_sha2_password）：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;your_new_password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>或者使用 caching_sha2_password 插件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> caching_sha2_password <span class="keyword">BY</span> <span class="string">&#x27;your_new_password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>小课堂：MySQL 8.0 及之后的版本中，mysql_native_password 和 caching_sha2_password 是 MySQL 中两种不同的身份验证插件，它们在安全性和性能上有一定的区别。以下是它们的详细对比：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1. mysql_native_password 插件</span><br><span class="line">    - 概述：mysql_native_password 是 MySQL 较早版本（5.7 及以前）中的默认身份验证插件，它通过哈希算法（SHA1）加密用户密码，并用于验证用户身份。</span><br><span class="line">    - 优点：</span><br><span class="line">        - 兼容性好：与 MySQL 早期版本、PHP 及其他数据库驱动程序（如 PDO、MySQLi）都有很好的兼容性。</span><br><span class="line">        - 配置简单：不需要额外的密码加密设置，容易理解和使用。</span><br><span class="line">    - 缺点：</span><br><span class="line">        - 安全性较低：使用 SHA1 作为哈希算法，而 SHA1 已被证明存在安全漏洞，因此使用该插件的密码容易受到彩虹表攻击和其他哈希破解技术的攻击。</span><br><span class="line">    - 适用场景：</span><br><span class="line">        - 与旧版本 MySQL 或旧版本客户端程序的兼容性需求。</span><br><span class="line">        - 出于兼容性考虑，推荐在低风险环境或开发环境中使用。</span><br><span class="line">2. caching_sha2_password 插件</span><br><span class="line">    - 概述：caching_sha2_password 是 MySQL 8.0 及之后的默认身份验证插件，使用更安全的 SHA-256 哈希算法来加密密码，并带有密码缓存功能，可以提高身份验证的效率。</span><br><span class="line">    - 优点：</span><br><span class="line">        - 更高的安全性：SHA-256 比 SHA1 更强大，能够更好地抵御暴力破解和其他类型的密码攻击。</span><br><span class="line">        - 提高性能：使用了客户端和服务器的身份验证缓存机制，可以减少重复身份验证时的性能开销，提升性能表现。</span><br><span class="line">        - 加密连接：支持加密连接（TLS/SSL），在不安全的网络中也可以保证传输中的数据安全性。</span><br><span class="line">    缺点：</span><br><span class="line">        - 兼容性问题：由于 caching_sha2_password 是 MySQL 8.0 中引入的新插件，因此可能与旧版本的 MySQL 客户端和驱动程序不兼容。例如：一些旧版本的 PHP 和 MySQLi 扩展可能无法直接连接到使用 caching_sha2_password 插件的 MySQL 数据库。</span><br><span class="line">    - 适用场景：</span><br><span class="line">        - 强安全性需求：在生产环境中，推荐使用 caching_sha2_password 来确保数据安全性。</span><br><span class="line">        - 高性能需求：由于缓存机制的存在，适用于高并发和频繁数据库访问的场景。</span><br><span class="line"></span><br><span class="line">在选择建议方面：</span><br><span class="line"></span><br><span class="line">1. 兼容性优先时使用 mysql_native_password：</span><br><span class="line">    - 如果你的 Laravel 项目、PHP 版本较旧（例如 PHP 7.x），或者使用了旧的 MySQL 客户端库（如 MySQLi），可能会遇到 caching_sha2_password 不兼容的问题。</span><br><span class="line">    - 在这种情况下，可以选择 mysql_native_password 作为过渡解决方案，以保证 Laravel 项目能够正常连接到数据库。</span><br><span class="line">2. 安全性优先时使用 caching_sha2_password：</span><br><span class="line">    - 在生产环境中，如果你的 Laravel 项目、PHP 版本以及 MySQL 客户端均支持 MySQL 8.0 及以上，并且支持 caching_sha2_password 插件，建议使用该插件以提高密码安全性。</span><br><span class="line">    - 另外，如果需要使用 SSL/TLS 加密的连接，也建议使用 caching_sha2_password。</span><br></pre></td></tr></table></figure><p>这里我选择的是 <strong>caching_sha2_password</strong></p><ol start="4"><li>刷新权限表：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><ol start="5"><li>退出 MySQL：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure><ol start="6"><li>验证 root 密码是否生效</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="5-安装-PHP"><a href="#5-安装-PHP" class="headerlink" title="5. 安装 PHP"></a>5. 安装 PHP</h2><p>安装 PHP 及其扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install php-fpm php-mysql php-cli php-xml php-mbstring php-curl php-zip php-gd php-imagick -y</span><br></pre></td></tr></table></figure><p>截稿时最新版本为 8.3</p><p>配置 PHP-FPM： 编辑 PHP 配置文件 php.ini：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/php/8.3/fpm/php.ini</span><br></pre></td></tr></table></figure><p>确保以下参数值正确（如果没有则手动添加或修改）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cgi.fix_pathinfo</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">memory_limit</span> = <span class="number">512</span>M</span><br><span class="line"><span class="attr">upload_max_filesize</span> = <span class="number">50</span>M</span><br><span class="line"><span class="attr">post_max_size</span> = <span class="number">50</span>M</span><br><span class="line"><span class="attr">max_execution_time</span> = <span class="number">300</span></span><br></pre></td></tr></table></figure><p>重启 PHP-FPM 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart php8.3-fpm</span><br></pre></td></tr></table></figure><h2 id="6-配置-Nginx-以支持-PHP"><a href="#6-配置-Nginx-以支持-PHP" class="headerlink" title="6. 配置 Nginx 以支持 PHP"></a>6. 配置 Nginx 以支持 PHP</h2><p>创建一个新的 Nginx 配置文件，或者修改默认的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/nginx/sites-available/laravel</span><br></pre></td></tr></table></figure><p>在文件中添加以下内容（确保与 Laravel 项目目录匹配）：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your_domain_or_ip;</span><br><span class="line">    <span class="attribute">root</span> /var/www/laravel/public;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> snippets/fastcgi-php.conf;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/var/run/php/php8.1-fpm.sock;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用此配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/nginx/sites-available/laravel /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><p>检查 Nginx 配置语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nginx -t</span><br></pre></td></tr></table></figure><p>重启 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="安装-Composer"><a href="#安装-Composer" class="headerlink" title="安装 Composer"></a>安装 Composer</h2><p>全局安装 Composer：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer --version</span><br></pre></td></tr></table></figure><h2 id="完事儿"><a href="#完事儿" class="headerlink" title="完事儿"></a>完事儿</h2><p>至此，一个崭新的 LNMP 环境就配置好了，下一篇文章我将继续介绍如何在此基础上部署一个 Laravel 项目。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置准备工作&quot;&gt;&lt;a href=&quot;#前置准备工作&quot; class=&quot;headerlink&quot; title=&quot;前置准备工作&quot;&gt;&lt;/a&gt;前置准备工作&lt;/h2&gt;&lt;p&gt;本文章将指导您如何使用一台空白的云服务器（这里演示的是腾讯云的轻量服务器），在仅安装 ubuntu 24.0</summary>
      
    
    
    
    <category term="LNMP" scheme="https://nightingalewk.github.io/categories/LNMP/"/>
    
    
    <category term="linux" scheme="https://nightingalewk.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>laravel 10 在 vite 工作流中引入并使用 Font Awesome 6</title>
    <link href="https://nightingalewk.github.io/2023/11/21/62.%20laravel%2010%20%E5%9C%A8%20vite%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%B8%AD%E5%BC%95%E5%85%A5%E5%B9%B6%E4%BD%BF%E7%94%A8%20Font%20Awesome/"/>
    <id>https://nightingalewk.github.io/2023/11/21/62.%20laravel%2010%20%E5%9C%A8%20vite%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%B8%AD%E5%BC%95%E5%85%A5%E5%B9%B6%E4%BD%BF%E7%94%A8%20Font%20Awesome/</id>
    <published>2023-11-21T10:00:00.000Z</published>
    <updated>2023-11-21T08:50:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>引入 Font Awesome 组件到 Laravel 项目的 Vite 构建中涉及一些步骤。以下是一般的指南：</p><h2 id="1-安装-Font-Awesome："><a href="#1-安装-Font-Awesome：" class="headerlink" title="1. 安装 Font Awesome："></a>1. 安装 Font Awesome：</h2><p>通过 npm 或 yarn 安装 Font Awesome。在项目根目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @fortawesome/fontawesome-free</span><br></pre></td></tr></table></figure><p>或者使用 yarn：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @fortawesome/fontawesome-free</span><br></pre></td></tr></table></figure><h2 id="2-引入-Font-Awesome-样式："><a href="#2-引入-Font-Awesome-样式：" class="headerlink" title="2. 引入 Font Awesome 样式："></a>2. 引入 Font Awesome 样式：</h2><p>在 Vite 项目中，你可以在入口文件（通常是 main.js 或 main.ts,laravel 默认是 app.js ）中引入 Font Awesome 样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js or src/main.ts or resources/js/app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@fortawesome/fontawesome-free/css/all.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他的入口文件内容...</span></span><br></pre></td></tr></table></figure><p>这将引入 Font Awesome 的所有样式。如果你只需要使用特定图标的样式，你可以根据需要引入 solid、regular 或 brands 中的子集。</p><h2 id="4-npm-构建"><a href="#4-npm-构建" class="headerlink" title="4. npm 构建"></a>4. npm 构建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment">## laravel sail 环境需要添加 sail 前缀</span></span><br><span class="line">sail npm run dev</span><br></pre></td></tr></table></figure><h2 id="3-开始使用"><a href="#3-开始使用" class="headerlink" title="3. 开始使用"></a>3. 开始使用</h2><p>然后你就可以使用 Font Awesome 图标了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;引入 Font Awesome 组件到 Laravel 项目的 Vite 构建中涉及一些步骤。以下是一般的指南：&lt;/p&gt;
&lt;h2 id=&quot;1-安装-Font-Awesome：&quot;&gt;&lt;a href=&quot;#1-安装-Font-Awesome：&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="Font Awesome" scheme="https://nightingalewk.github.io/tags/Font-Awesome/"/>
    
    <category term="vite" scheme="https://nightingalewk.github.io/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>laravel 项目执行 sail up 报 80 端口占用问题</title>
    <link href="https://nightingalewk.github.io/2023/11/16/61.%20laravel%20%E9%A1%B9%E7%9B%AE%E6%89%A7%E8%A1%8C%20sail%20up%20%E6%8A%A5%2080%20%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://nightingalewk.github.io/2023/11/16/61.%20laravel%20%E9%A1%B9%E7%9B%AE%E6%89%A7%E8%A1%8C%20sail%20up%20%E6%8A%A5%2080%20%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2023-11-16T09:00:00.000Z</published>
    <updated>2023-11-16T09:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天给一台新机器装好 laravel sail 环境后，在最后一步启动项目时，报错如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wangkai@Precision-<span class="number">7920</span>:~/code/daochenglin$ sail up -d</span><br><span class="line">[+] Building <span class="number">0.0</span>s (<span class="number">0</span>/<span class="number">0</span>)                                                                          docker:<span class="keyword">default</span></span><br><span class="line">[+] Running <span class="number">8</span>/<span class="number">8</span></span><br><span class="line"> ✔ Network daochenglin_sail              Created                                                           <span class="number">0.0</span>s</span><br><span class="line"> ✔ Container daochenglin-meilisearch-<span class="number">1</span>   Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-selenium-<span class="number">1</span>      Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-redis-<span class="number">1</span>         Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-memcached-<span class="number">1</span>     Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-mysql-<span class="number">1</span>         Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-mailpit-<span class="number">1</span>       Started                                                           <span class="number">0.1</span>s</span><br><span class="line"> ✔ Container daochenglin-laravel.test-<span class="number">1</span>  Created                                                           <span class="number">0.1</span>s</span><br><span class="line"><span class="built_in">Error</span> response <span class="keyword">from</span> daemon: Ports are not available: exposing port TCP <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span> -&gt; <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">0</span>: listen tcp <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</span><br></pre></td></tr></table></figure><p>这个问题就是我们本机的 80 端口被占用了，我个人的电脑是 windows 11，系统服务默认开启一个叫 <code>World Wide Web 发布服务</code> 的服务，他是自动启动的，该服务通过 Internet Information Services 管理器提供 Web 连接和管理，默认占用 80 端口，这个服务我们很明显用不到，给他禁用掉，然后再 sail up 就 ok 了。</p><p>一点小小的经验分享 😁</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天给一台新机器装好 laravel sail 环境后，在最后一步启动项目时，报错如下：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="laravel sail" scheme="https://nightingalewk.github.io/tags/laravel-sail/"/>
    
    <category term="故障排除" scheme="https://nightingalewk.github.io/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>laravel artisan route 用法</title>
    <link href="https://nightingalewk.github.io/2023/11/15/60.%20laravel%20artisan%20route%20%E7%94%A8%E6%B3%95/"/>
    <id>https://nightingalewk.github.io/2023/11/15/60.%20laravel%20artisan%20route%20%E7%94%A8%E6%B3%95/</id>
    <published>2023-11-15T09:00:00.000Z</published>
    <updated>2023-11-15T09:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>基本用法是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">laravel artisan route 用法</span><br></pre></td></tr></table></figure><p>可添加的后缀有：</p><table><thead><tr><th>后缀参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>–method&#x3D;<TERM></td><td>Filters the routes by method.</td><td>无</td></tr><tr><td>–name&#x3D;<TERM></td><td>Filters the routes by name.</td><td>无</td></tr><tr><td>–path&#x3D;<TERM></td><td>Filters the routes by path (URI).</td><td>无</td></tr><tr><td>–reverse</td><td>Reverses the order the routes are displayed in the table.</td><td>无</td></tr><tr><td>-r</td><td>Reverses the order the routes are displayed in the table (shortcut to –reverse).</td><td>无</td></tr><tr><td>–sort</td><td>The column to sort by. Accepted values are host, method, uri, name, action or middleware.</td><td>uri</td></tr></tbody></table><p>举例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filter the route list by name.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --name=account</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter the route list by URI.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --path=<span class="string">&#x27;api/v1/&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Filter the route list by method.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --method=GET</span><br><span class="line"></span><br><span class="line"><span class="comment"># The filters can be combined; results will be aggregated using &quot;and&quot; logic. The following command:</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --path=account --method=GET</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter the routes and display them in reverse order.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --method=GET --reverse</span><br><span class="line"> </span><br><span class="line"><span class="comment"># The following is equivalent to the previous example.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --method=GET -r</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Filter the routes and sort `name` column.</span></span><br><span class="line">php artisan route:<span class="keyword">list</span> --method=GET --sort=name</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基本用法是：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="artisan 指令" scheme="https://nightingalewk.github.io/tags/artisan-%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>哎，又把博客迁移了</title>
    <link href="https://nightingalewk.github.io/2023/11/07/59.%20%E5%93%8E%EF%BC%8C%E5%8F%88%E6%8A%8A%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%BA%86/"/>
    <id>https://nightingalewk.github.io/2023/11/07/59.%20%E5%93%8E%EF%BC%8C%E5%8F%88%E6%8A%8A%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%BA%86/</id>
    <published>2023-11-07T02:57:43.000Z</published>
    <updated>2023-11-07T03:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就结果来说，我还是回归 hexo 的怀抱了。</p></blockquote><p>本来我的博客部署在自己的腾讯云轻量服务器，但是最近手头的项目需要部署测试，就可能对服务器进行一些变动和修改，甚至重装，这就对博客的稳定造成了影响。为了追求稳定，我决定还是把网站部署到 github pages 上，虽然可能存在部分打不开的情况，但至少是免费的，我再把我的域名指向默认地址上，就没问题了。</p><p>其实 typecho 用得好好的，非常顺手，要不是服务器有其他用处，我才不换呢。</p><p>啥也没丢，啥都可以正常运行，而且 github 为我们提供稳定可靠谱的服务，我觉得就足够了</p><p>回顾一路走来的博客路线，从 wordpress，再到 hexo，再到 typecho，再回到 hexo，个人的偏好从一开始追寻花里胡哨，大而全，慢慢的转为简单简约，稳定可靠。慢慢回归博客的记录本质。</p><p>在发文的时候，我把该转移的资源都完成了转移，那就让我们继续在 github pages 强力驱动下的 hexo 里继续记录我的成长历程吧</p><blockquote><p>生命不息，折腾不止</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;就结果来说，我还是回归 hexo 的怀抱了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本来我的博客部署在自己的腾讯云轻量服务器，但是最近手头的项目需要部署测试，就可能对服务器进行一些变动和修改，甚至重装，这就对博客的稳定造成了影响。为了追求稳定，</summary>
      
    
    
    
    <category term="个人" scheme="https://nightingalewk.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
    <category term="迁移" scheme="https://nightingalewk.github.io/tags/%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>配置并部署 laravel 10 项目到 ubuntu 22.04.2 服务器</title>
    <link href="https://nightingalewk.github.io/2023/07/10/57.%20%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%83%A8%E7%BD%B2%20laravel%2010%20%E9%A1%B9%E7%9B%AE%E5%88%B0%20ubuntu%2022.04.2%20%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://nightingalewk.github.io/2023/07/10/57.%20%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%83%A8%E7%BD%B2%20laravel%2010%20%E9%A1%B9%E7%9B%AE%E5%88%B0%20ubuntu%2022.04.2%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2023-07-10T06:21:00.000Z</published>
    <updated>2023-11-07T03:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubuntu-镜像下载与安装"><a href="#ubuntu-镜像下载与安装" class="headerlink" title="ubuntu 镜像下载与安装"></a>ubuntu 镜像下载与安装</h2><p>ubuntu 官方可免费下载服务器版本的 iso 镜像文件，我们使用本镜像进行最小化安装即可。我自己的操作是把镜像交给我们公司的网络运维工程师，让他给我那这个镜像开了个虚机，分配了一个内网 IP 用来测试。</p><p>记得跟网络运维工程师说一下让服务器通互联网，再配置一下阿里云的源</p><h2 id="系统必要的配置"><a href="#系统必要的配置" class="headerlink" title="系统必要的配置"></a>系统必要的配置</h2><p>系统默认没初始化 root 账号，使用下方指令初始化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>然后定一个安全好记的密码就行，我们之后的操作都在 root 账号下执行。</p><p>接下来就是升级 ubuntu 系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><p>然后我们安装 vim 编辑器，方便编辑文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vim</span><br></pre></td></tr></table></figure><p>然后我们安装 screen 工具，保证我们的操作不因关闭终端而终止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install screen</span><br></pre></td></tr></table></figure><p>至此该配置的都配置好了</p><h2 id="安装并配置-oneinstack"><a href="#安装并配置-oneinstack" class="headerlink" title="安装并配置 oneinstack"></a>安装并配置 oneinstack</h2><p>oneinstack 是一款自动化部署 lnmp 环境的组件工具，百度并访问官网，选择自动安装，选好你需要的配置后，复制好安装的命令，后面用</p><p>安装 lnmp 环境之前，我们新建一个 screen 窗口，保证我们的安装不因窗口关闭而终止：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S lnmp</span><br></pre></td></tr></table></figure><p>下面是一些常用操作，可以参考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctrl a + d    // 暂退当前的 screen 窗口</span><br><span class="line">screen -r lnmp    // 恢复名为 lnmp 的 screen 窗口</span><br><span class="line">screen -ls    // 查看当前的所有 screen 窗口信息</span><br></pre></td></tr></table></figure><p>回到话题，配置好 screen 就可以开始安装 lnmp 环境啦，用上面的你复制的 oneinstack 生成的指令到你的终端，回车，然后等待安装完毕并重启服务器即可。</p><p>此过程一般没问题，若出现报错，安装会终止并提示错误信息，建议重新执行一遍。再有故障那就要自行解决了。</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>根据 oneinstack 安装时配置的数据库密码，我们通过访问咱们主机的 ip 进入 oneinstack 默认页面，然后找到 phpmyadmin ，使用 root 和刚才说的密码进入数据库中，新建一个所需的空白数据库。</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>假设你的 laravel 10 项目在 github 中，代码通过 git 进行版本控制。</p><p>接下来我们前往网站目录，并将代码 clone 到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /date/wwwroot</span><br><span class="line">mv default default_back</span><br><span class="line">git clone [ 你的远端 git 地址 ] jiepade</span><br></pre></td></tr></table></figure><h2 id="php-配置"><a href="#php-配置" class="headerlink" title="php 配置"></a>php 配置</h2><p>我们需要将部分的 php 默认禁用的函数方法打开，方便使用诸如 composer 之类的命令，具体操作为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/php/etc/</span><br><span class="line">vim php.ini</span><br></pre></td></tr></table></figure><p>然后找到如下这行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; This directive allows you to disable certain functions.</span><br><span class="line">; It receives a comma-delimited list of function names.</span><br><span class="line">; https://php.net/disable-functions</span><br><span class="line">disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_restore,dl,readlink,symlink,popepassthru,stream_socket_server,fsocket,popen</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,ini_alter,ini_restore,dl,readlink,popepassthru,stream_socket_server,fsocket,popen</span><br></pre></td></tr></table></figure><p>保存退出后，重启 php—fpm 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service php-fpm restart</span><br></pre></td></tr></table></figure><h2 id="composer-安装与执行"><a href="#composer-安装与执行" class="headerlink" title="composer 安装与执行"></a>composer 安装与执行</h2><p>回到项目根目录，安装 composer，若已安装，直接配置下一步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;copy(&#x27;https://install.phpcomposer.com/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span><br><span class="line">php composer-setup.php</span><br><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure><p>若以上指令报错 php 无法找到，请检查path路径是否添加了php的bin目录，具体百度即可。不可能是没装 php，oneinstack 已经给你装好了，这个问题基本上是ubuntu下一般账号能跑 php，但 root 不行。小问题的。</p><p>我们不使用阿里云的 composer 镜像，因为国内镜像的composer各依赖版本不够新，影响使用，用国外原版镜像慢点，但是稳定且最新。</p><p>安装好后，在项目根目录执行 composer i 指令，安装项目所需的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer i</span><br></pre></td></tr></table></figure><h2 id="laravel-初始化配置"><a href="#laravel-初始化配置" class="headerlink" title="laravel 初始化配置"></a>laravel 初始化配置</h2><p>接下来就可以进行基础的 laravel 配置了，首先我们复制根目录下的 .env 一份出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br></pre></td></tr></table></figure><p>然后生成密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure><p>然后修改 .env 为项目实际需要调整的内容，具体需要咨询开发人员要改哪些。</p><p>完成上述环节后，就可以进行数据库填充工作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate:refresh --seed &amp;&amp; php artisan admin:install </span><br></pre></td></tr></table></figure><p>之后你可能需要借助数据库程序，连接到服务器，把一些你备份的项目初始化数据库填充到项目中，具体自行操作即可，推荐使用 Dbeaver，开源且免费，官方也在更新，别用盗版的 navicat 辣</p><h2 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h2><p>这时候你访问网址是无法看到你的项目的，需要对 nginx 配置，首先找到配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><p>修改如下的几个值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">######################## default ############################</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 2333;             &lt;------------------here,change it</span><br><span class="line">    server_name _;</span><br><span class="line">    access_log /data/wwwlogs/access_nginx.log combined;</span><br><span class="line">    root /data/wwwroot/default/public;             &lt;------------------here,change it</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    #error_page 404 /404.html;</span><br><span class="line">    #error_page 502 /502.html;</span><br><span class="line">    location /nginx_status &#123;</span><br><span class="line">      stub_status on;</span><br><span class="line">      access_log off;</span><br><span class="line">      allow 127.0.0.1;</span><br><span class="line">      deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">      #fastcgi_pass remote_php_ip:9000;</span><br><span class="line">      fastcgi_pass unix:/dev/shm/php-cgi.sock;</span><br><span class="line">      fastcgi_index index.php;</span><br><span class="line">      include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123;</span><br><span class="line">      expires 30d;</span><br><span class="line">      access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(js|css)?$ &#123;</span><br><span class="line">      expires 7d;</span><br><span class="line">      access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^/(\.user.ini|\.ht|\.git|\.svn|\.project|LICENSE|README.md) &#123;</span><br><span class="line">      deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location /.well-known &#123;</span><br><span class="line">      allow all;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;             &lt;------------------here,add it</span><br><span class="line">      try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存退出后，重启 nginx 使之生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h2 id="文件权限调整"><a href="#文件权限调整" class="headerlink" title="文件权限调整"></a>文件权限调整</h2><p>我们需要对项目的文件提权，允许项目进行诸如存储文件等操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 default</span><br><span class="line">chown -R www-data:www-data default</span><br><span class="line"></span><br><span class="line">cd default</span><br><span class="line">chgrp -R www storage bootstrap/cache</span><br><span class="line">chmod -R ug+rwx storage bootstrap/cache</span><br></pre></td></tr></table></figure><p>之后访问 http:&#x2F;&#x2F;[你的 IP 地址]:2333&#x2F; 就可以看到你的项目辣，项目部署到此结束</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ubuntu-镜像下载与安装&quot;&gt;&lt;a href=&quot;#ubuntu-镜像下载与安装&quot; class=&quot;headerlink&quot; title=&quot;ubuntu 镜像下载与安装&quot;&gt;&lt;/a&gt;ubuntu 镜像下载与安装&lt;/h2&gt;&lt;p&gt;ubuntu 官方可免费下载服务器版本的 i</summary>
      
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="代码部署" scheme="https://nightingalewk.github.io/tags/%E4%BB%A3%E7%A0%81%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>git 同时推送本地代码到远端 2 个仓库</title>
    <link href="https://nightingalewk.github.io/2023/07/06/58.%20git%20%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%AB%AF%202%20%E4%B8%AA%E4%BB%93%E5%BA%93/"/>
    <id>https://nightingalewk.github.io/2023/07/06/58.%20git%20%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%AB%AF%202%20%E4%B8%AA%E4%BB%93%E5%BA%93/</id>
    <published>2023-07-06T00:36:00.000Z</published>
    <updated>2023-11-07T02:52:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>本地代码执行如下命令，可将代码同时提交到 github 和 coding 两个平台：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;初始化项目&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:NightingaleWK/jiepade.git</span><br><span class="line">git remote set-url --add origin git@e.coding.net:nightingalewk/jiepade/v1.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本地代码执行如下命令，可将代码同时提交到 github 和 coding 两个平台：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="git" scheme="https://nightingalewk.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>（更新中）将 homestead 中的项目迁移到 laravel sail 中进行开发</title>
    <link href="https://nightingalewk.github.io/2023/05/09/56.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E5%B0%86%20homestead%20%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0%20laravel%20sail%20%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/"/>
    <id>https://nightingalewk.github.io/2023/05/09/56.%20%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89%E5%B0%86%20homestead%20%E4%B8%AD%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0%20laravel%20sail%20%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/</id>
    <published>2023-05-09T01:43:00.000Z</published>
    <updated>2023-11-07T02:51:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文的目的是：将原本跑 homestead 环境下的 laravel 项目，迁移到官方最新推荐的 laravel sail 开发环境中。下面我分享一下我的操作方法。</p><p>在文章开始之前，我们默认大家均已拥有一个 homestead 开发环境，且你也是在其之上本地开发多次的开发者，而且你的需求是将你的 homestead 开发环境转换成 laravel sail，希望借助 docker 技术来提升系统的</p><h2 id="1-项目克隆"><a href="#1-项目克隆" class="headerlink" title="1. 项目克隆"></a>1. 项目克隆</h2><p>首先我们你将线上仓库的代码clone到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:NightingaleWK/larabbs.git larabbs</span><br></pre></td></tr></table></figure><p>然后我们启动 homestead ，并在 homestead 的 linux 环境中执行接下来的工作。</p><p>我们先来到项目根目录复制一份 .env 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br><span class="line"></span><br><span class="line">vim .env</span><br><span class="line"></span><br><span class="line">// 编辑一下 .env 文件并保存</span><br></pre></td></tr></table></figure><h2 id="2-项目改造"><a href="#2-项目改造" class="headerlink" title="2. 项目改造"></a>2. 项目改造</h2><p>然后在已运行的应用中安装 Composer 依赖，以下指令执行后，其余未安装的以来也将一并安装，毕竟我们没有执行过 composer i 嘛</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require laravel/sail --dev</span><br></pre></td></tr></table></figure><p>在 Sail 完成安装后，你可以运行 Artisan 命令 sail:install。这个命令将会发布 Sail 的 docker-compose.yml 文件到你应用程序的根目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan sail:install --with=mysql,redis</span><br></pre></td></tr></table></figure><p>以上这一步的执行可能会花费很长时间，网上有很多修改相关配置的来提高速度，大家可以自己搜索，至于为什么我不用，那就是希望追求纯粹正统，composer 阿里云的源与官方源完全跟不上，composer u 执行完简直是反向升级，以后再也不相信国内的源了。</p><p>然后我再说一下 with 后面的该怎么填写，你可以尝试执行不带 with 的命令，可以看到几个可选的选项，这些就是填写在 with 后面的内容，按需选择安装即可。</p><p>上述步骤安装完毕会系统会提示 Sail build successful. 这就代表着这一阶段任务完成</p><p>然后我们把项目推送到线上仓库</p><h2 id="3-代码上传"><a href="#3-代码上传" class="headerlink" title="3. 代码上传"></a>3. 代码上传</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;ready for docker&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="4-代码部署"><a href="#4-代码部署" class="headerlink" title="4. 代码部署"></a>4. 代码部署</h2><p>然后我们回到我们的sail环境中，把最新的项目代码从仓库拉下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:NightingaleWK/larabbs.git larabbs</span><br></pre></td></tr></table></figure><p>之后我们也是重新配置 .env 文件</p><p>然后我们执行 composer 命令，安装在 sail 环境下的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    -u &quot;$(id -u):$(id -g)&quot; \</span><br><span class="line">    -v &quot;$(pwd):/var/www/html&quot; \</span><br><span class="line">    -w /var/www/html \</span><br><span class="line">    laravelsail/php82-composer:latest \</span><br><span class="line">    composer install --ignore-platform-reqs</span><br></pre></td></tr></table></figure><p>这里与在 homestead 中不同的是，我们 sail 环境不包括 composer 命令，这个命令使用一个包含 PHP 与 Composer 的小型 Docker 容器进行应用程序依赖的安装。</p><p>当你使用 laravelsail&#x2F;phpXX-composer 镜像时，你应该选择和你的应用程序所用环境相同的 PHP 版本（74、80、81 或 82）。</p><h2 id="5-环境运行"><a href="#5-环境运行" class="headerlink" title="5. 环境运行"></a>5. 环境运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sail up -d</span><br><span class="line"></span><br><span class="line">// -d 表示后台运行，去掉那就是前台运行，需要 ctrl + c 来结束。加入带着 -d，那么我们退出的话则需要输入 sail down 来结束</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文的目的是：将原本跑 homestead 环境下的 laravel 项目，迁移到官方最新推荐的 laravel sail 开发环境中。下面我分享一下我的操作方法。&lt;/p&gt;
&lt;p&gt;在文章开始之前，我们默认大家均已拥有一个 homestead 开发环境，且你也是在其之上本地开</summary>
      
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="homestead" scheme="https://nightingalewk.github.io/tags/homestead/"/>
    
    <category term="laravel sail" scheme="https://nightingalewk.github.io/tags/laravel-sail/"/>
    
  </entry>
  
  <entry>
    <title>解决 .gitignore 无效的问题</title>
    <link href="https://nightingalewk.github.io/2023/03/28/55.%20%E8%A7%A3%E5%86%B3%20.gitignore%20%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://nightingalewk.github.io/2023/03/28/55.%20%E8%A7%A3%E5%86%B3%20.gitignore%20%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2023-03-28T00:38:00.000Z</published>
    <updated>2023-11-07T02:50:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先确定好需要忽略的文件或文件夹，并加入到 .gitignore 中，然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update .gitignore&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>若你的另一台机子也需要更新代码，那么他在 git pull 的时候，.gitignore 中你刚才添加的文件和文件夹都会删除，记得重新生成或新建上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先确定好需要忽略的文件或文件夹，并加入到 .gitignore 中，然后执行：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;</summary>
      
    
    
    
    <category term="git" scheme="https://nightingalewk.github.io/categories/git/"/>
    
    
    <category term="debug" scheme="https://nightingalewk.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>皮蛋瘦肉粥</title>
    <link href="https://nightingalewk.github.io/2023/01/04/54.%20%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/"/>
    <id>https://nightingalewk.github.io/2023/01/04/54.%20%E7%9A%AE%E8%9B%8B%E7%98%A6%E8%82%89%E7%B2%A5/</id>
    <published>2023-01-04T09:31:00.000Z</published>
    <updated>2023-11-07T02:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>200克大米（也可糯米大米各100克），淘米洗净，然后重新加入清水500克，浸泡5小时，浸泡完毕后倒掉水</li><li>里脊肉50g切丝、皮蛋一个捏碎或切丁、料酒2g、盐6g、鸡精3g、味精3g、食用碱0.5g</li><li>用上方的盐、料酒腌制一下肉丝。</li><li>砂锅倒入食用碱、盐、2000g热水（米，热水 &#x3D; 1：10），开大火烧开，转小火熬25分钟。期间不停搅动，以防止糊锅</li><li>快开锅的时候加入肉丝、皮蛋丁、味精、鸡精。然后可自行加点别的，比如姜丝、葱末</li><li>出锅</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;200克大米（也可糯米大米各100克），淘米洗净，然后重新加入清水500克，浸泡5小时，浸泡完毕后倒掉水&lt;/li&gt;
&lt;li&gt;里脊肉50g切丝、皮蛋一个捏碎或切丁、料酒2g、盐6g、鸡精3g、味精3g、食用碱0.5g&lt;/li&gt;
&lt;li&gt;用上方的盐、料酒腌制一下肉丝</summary>
      
    
    
    
    <category term="美食" scheme="https://nightingalewk.github.io/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="粥" scheme="https://nightingalewk.github.io/tags/%E7%B2%A5/"/>
    
  </entry>
  
  <entry>
    <title>地道黄焖鸡</title>
    <link href="https://nightingalewk.github.io/2022/12/20/53.%20%E5%9C%B0%E9%81%93%E9%BB%84%E7%84%96%E9%B8%A1/"/>
    <id>https://nightingalewk.github.io/2022/12/20/53.%20%E5%9C%B0%E9%81%93%E9%BB%84%E7%84%96%E9%B8%A1/</id>
    <published>2022-12-20T09:25:00.000Z</published>
    <updated>2023-11-07T02:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原料"><a href="#原料" class="headerlink" title="原料"></a>原料</h2><p>1.5 斤鸡腿<br>土豆切块<br>杭椒辣椒等切块</p><h2 id="调味"><a href="#调味" class="headerlink" title="调味"></a>调味</h2><p>耗油15克<br>海鲜酱20克<br>黄豆酱15克<br>葱伴侣大酱15克<br>东古一品鲜酱油25克<br>红烧酱油5克</p><h2 id="腌制"><a href="#腌制" class="headerlink" title="腌制"></a>腌制</h2><p>葱姜料酒去腥，加酱料，搅匀，腌制半小时</p><h2 id="中药"><a href="#中药" class="headerlink" title="中药"></a>中药</h2><p>八角三克，桂皮五克，香叶一克，小茴香两克，白芷三克，花椒三克，草果皮一个去籽，装包里，冲洗3次</p><h2 id="灵魂"><a href="#灵魂" class="headerlink" title="灵魂"></a>灵魂</h2><p>干香菇六颗洗净，加开水300g，制香菇水，这是黄焖鸡的灵魂</p><h2 id="烹饪"><a href="#烹饪" class="headerlink" title="烹饪"></a>烹饪</h2><p>锅中加黄焖鸡，香菇水，五克鸡精，三克味精，五克白糖，下料包，高压锅封盖，上汽后计时5分钟，之后再焖 20 分钟。砂锅放香菇，土豆块，烧开，放青红椒，收汁，撒香葱和香菜</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原料&quot;&gt;&lt;a href=&quot;#原料&quot; class=&quot;headerlink&quot; title=&quot;原料&quot;&gt;&lt;/a&gt;原料&lt;/h2&gt;&lt;p&gt;1.5 斤鸡腿&lt;br&gt;土豆切块&lt;br&gt;杭椒辣椒等切块&lt;/p&gt;
&lt;h2 id=&quot;调味&quot;&gt;&lt;a href=&quot;#调味&quot; class=&quot;header</summary>
      
    
    
    
    <category term="美食" scheme="https://nightingalewk.github.io/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
    <category term="特色小吃" scheme="https://nightingalewk.github.io/tags/%E7%89%B9%E8%89%B2%E5%B0%8F%E5%90%83/"/>
    
  </entry>
  
  <entry>
    <title>发起 laravel 队列任务不生效</title>
    <link href="https://nightingalewk.github.io/2022/12/14/52.%20%E5%8F%91%E8%B5%B7%20laravel%20%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    <id>https://nightingalewk.github.io/2022/12/14/52.%20%E5%8F%91%E8%B5%B7%20laravel%20%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88/</id>
    <published>2022-12-14T08:48:00.000Z</published>
    <updated>2023-11-07T03:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>当确定你的代码都没问题，而且队列都在运行，而且是你变动了 job 文件，那很有可能是缓存原因导致的，清理一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan cache:clear &amp;&amp; php artisan config:clear &amp;&amp; php artisan route:clear &amp;&amp; php artisan view:clear</span><br></pre></td></tr></table></figure><p>若是在 laravel sail 开发环境中，修改一下即可使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sail artisan cache:clear &amp;&amp; sail artisan config:clear &amp;&amp; sail artisan route:clear &amp;&amp; sail artisan view:clear</span><br></pre></td></tr></table></figure><p>花式清理后就好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当确定你的代码都没问题，而且队列都在运行，而且是你变动了 job 文件，那很有可能是缓存原因导致的，清理一下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="debug" scheme="https://nightingalewk.github.io/tags/debug/"/>
    
    <category term="队列" scheme="https://nightingalewk.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="redis" scheme="https://nightingalewk.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>在 laravel 中使用 redis 队列</title>
    <link href="https://nightingalewk.github.io/2022/12/09/51.%20%E5%9C%A8%20laravel%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis%20%E9%98%9F%E5%88%97/"/>
    <id>https://nightingalewk.github.io/2022/12/09/51.%20%E5%9C%A8%20laravel%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20redis%20%E9%98%9F%E5%88%97/</id>
    <published>2022-12-09T08:04:00.000Z</published>
    <updated>2023-11-07T03:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们实现的效果为：将一些业务逻辑转化为任务（job），然后启用队列功能，而且是 redis 的队列，同时使用 laravel 官方扩展 Horizon 实现队列的监控。将复杂耗时的工作后台处理，提高前台用户的使用体验。</p><h2 id="1-安装-redis"><a href="#1-安装-redis" class="headerlink" title="1. 安装 redis"></a>1. 安装 redis</h2><p>注意不要使用国内 composer 源，官方的是最全最新的（什么阿里云镜像源反向升级了解一下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require predis/predis</span><br></pre></td></tr></table></figure><p>修改环境变量 QUEUE_CONNECTION 的值为 redis，并指定我们将使用 predis 作为请求 Redis 的类库：</p><p>.env</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">QUEUE_CONNECTION=redis</span><br><span class="line">REDIS_CLIENT=predis</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h2 id="2-生成任务类"><a href="#2-生成任务类" class="headerlink" title="2. 生成任务类"></a>2. 生成任务类</h2><p>使用以下 Artisan 命令来生成一个新的队列任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:job EnterpriseExport</span><br></pre></td></tr></table></figure><p>该命令会在 app&#x2F;Jobs 目录下生成一个新的类：</p><p>app&#x2F;Jobs&#x2F;EnterpriseExport.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Jobs;</span><br><span class="line"></span><br><span class="line">use App\Admin\Controllers\Api\StaticFun;</span><br><span class="line">use App\Models\Asset;</span><br><span class="line">use Illuminate\Bus\Queueable;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldBeUnique;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldQueue;</span><br><span class="line">use Illuminate\Foundation\Bus\Dispatchable;</span><br><span class="line">use Illuminate\Queue\InteractsWithQueue;</span><br><span class="line">use Illuminate\Queue\SerializesModels;</span><br><span class="line">use Illuminate\Support\Facades\DB;</span><br><span class="line"></span><br><span class="line">class GetAssetsRemainDate implements ShouldQueue, ShouldBeUnique</span><br><span class="line">&#123;</span><br><span class="line">    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create a new job instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute the job.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function handle()</span><br><span class="line">    &#123;</span><br><span class="line">        // 拿到全部资产信息</span><br><span class="line">        $assets = Asset::all();</span><br><span class="line"></span><br><span class="line">        // 开始循环计算资产剩余质保时间并更新</span><br><span class="line">        foreach ($assets as $key =&gt; $value) &#123;</span><br><span class="line">            // 计算</span><br><span class="line">            $warranty_info = StaticFun::get2DateInfo($value-&gt;warranty_start, $value-&gt;warranty_end);</span><br><span class="line">            // 拿取</span><br><span class="line">            $warranty_remain = $warranty_info[&#x27;warranty_remain&#x27;];</span><br><span class="line">            // 更新写入</span><br><span class="line">            DB::table(&#x27;asset&#x27;)-&gt;where(&#x27;id&#x27;, $value-&gt;id)-&gt;update([&#x27;warranty_remain&#x27; =&gt; $warranty_remain]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一点需要注意，我们将会在模型监控器中分发任务，任务中要避免使用 Eloquent 模型接口调用，如：create(), update(), save() 等操作。否则会陷入调用死循环 —— 模型监控器分发任务，任务触发模型监控器，模型监控器再次分发任务，任务再次触发模型监控器… 死循环。在这种情况下，使用 DB 类直接对数据库进行操作即可。</p><h2 id="3-任务分发"><a href="#3-任务分发" class="headerlink" title="3. 任务分发"></a>3. 任务分发</h2><p>前往控制器或者观察者，去插入这项任务。</p><p>SettingController.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">class SettingController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    // 展示</span><br><span class="line">    public function index(Content $content)</span><br><span class="line">    &#123;</span><br><span class="line">        return $content</span><br><span class="line">            -&gt;header(&#x27;系统设置&#x27;)</span><br><span class="line">            -&gt;description(&#x27;亲自参与到系统的个性化管理&#x27;)</span><br><span class="line">            -&gt;body(function (Row $row) &#123;</span><br><span class="line">                $row-&gt;column(12, Setting::index());</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 刷新资产质保剩余时间</span><br><span class="line">    public function warrantyRefresh()</span><br><span class="line">    &#123;</span><br><span class="line">        dispatch(new GetAssetsRemainDate);  &lt;-- HERE</span><br><span class="line"></span><br><span class="line">        return redirect(&#x27;/admin/setting&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h2 id="4-安装-Horizon"><a href="#4-安装-Horizon" class="headerlink" title="4. 安装 Horizon"></a>4. 安装 Horizon</h2><p>使用 Composer 安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer require laravel/horizon</span><br></pre></td></tr></table></figure><p>安装完成后，使用 vendor:publish Artisan 命令发布相关文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan vendor:publish --provider=&quot;laravel\Horizon\HorizonServiceProvider&quot;</span><br></pre></td></tr></table></figure><p>分别是配置文件 config&#x2F;horizon.php 和存放在 public&#x2F;vendor&#x2F;horizon 文件夹中的 CSS 、JS 等页面资源文件。</p><p>Horizon 是一个监控程序，需要常驻运行，我们可以通过以下命令启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan horizon</span><br></pre></td></tr></table></figure><p>至此安装完毕，浏览器打开 larabbs.test&#x2F;horizon 访问控制台</p><h2 id="5-安装-Supervisor"><a href="#5-安装-Supervisor" class="headerlink" title="5. 安装 Supervisor"></a>5. 安装 Supervisor</h2><p>Supervisor 是一个用于 Linux 操作系统的进程监视器。如果 Horizon 进程被退出或终止，Supervisor 将自动重启你的 Horizon 进程。如果要在 Ubuntu 上安装 Supervisor，你可以使用以下命令。如果你不使用 Ubuntu，也可以使用操作系统的包管理器安装 Supervisor：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure><h2 id="6-配置-Supervisor"><a href="#6-配置-Supervisor" class="headerlink" title="6. 配置 Supervisor"></a>6. 配置 Supervisor</h2><p>Supervisor 配置文件通常存储在 &#x2F;etc&#x2F;supervisor&#x2F;conf.d 目录下。在此目录中，你可以创建任意数量的配置文件，这些配置文件会告诉 supervisor 如何监视你的进程。例如，让我们创建一个 horizon.conf 文件，它启动并监视一个 horizon 进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[program:horizon]</span><br><span class="line">process_name=%(program_name)s</span><br><span class="line">directory=/data/wwwroot/yanji.wkarrow.top</span><br><span class="line">command=/usr/local/php/bin/php artisan horizon</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/data/wwwroot/yanji.wkarrow.top/horizon.log</span><br><span class="line">stopwaitsecs=3600</span><br></pre></td></tr></table></figure><p>注意：要确保 stopwaitsecs 的值大于运行时间最长的任务所消耗的秒数。否则，Supervisor 可能会在工作完成前终止任务。<br>注意：编辑文件之前，请使用 root 权限进行操作，否则无法保存（针对 homestead 环境下的操作）</p><h2 id="7-启动-Supervisor"><a href="#7-启动-Supervisor" class="headerlink" title="7. 启动 Supervisor"></a>7. 启动 Supervisor</h2><p>在将新代码部署到服务器时，你需要终止 Horizon 主进程，以便进程监视器重新启动它并接收代码的更改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan horizon:terminate</span><br></pre></td></tr></table></figure><p>创建了配置文件后，可以使用以下命令更新 Supervisor 配置并启动进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl reread</span><br><span class="line"></span><br><span class="line">sudo supervisorctl update</span><br><span class="line"></span><br><span class="line">sudo supervisorctl start horizon</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们实现的效果为：将一些业务逻辑转化为任务（job），然后启用队列功能，而且是 redis 的队列，同时使用 laravel 官方扩展 Horizon 实现队列的监控。将复杂耗时的工作后台处理，提高前台用户的使用体验。&lt;/p&gt;
&lt;h2 id=&quot;1-安装-redis&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="队列" scheme="https://nightingalewk.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="redis" scheme="https://nightingalewk.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>又一次更换博客系统辣</title>
    <link href="https://nightingalewk.github.io/2022/11/24/50.%20%E5%8F%88%E4%B8%80%E6%AC%A1%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%BE%A3/"/>
    <id>https://nightingalewk.github.io/2022/11/24/50.%20%E5%8F%88%E4%B8%80%E6%AC%A1%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%BE%A3/</id>
    <published>2022-11-24T08:57:00.000Z</published>
    <updated>2023-11-07T02:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>当你看到这个文章的时候，我已经从 hexo 换回到 typecho 了，最近发现作者开始更新，版本到 1.2.0 ，普大喜奔🫡</p><p>我花了点时间把之前的博客迁移到了 typecho，以后就用它啦</p><p>另外，最近抢了一台腾讯云的轻量云服务器，333元3年，2C2G 配置，感觉完全可以做本站及其其他博客站等需要长期部署不太动的东西，所以借此机会把我的站点搬到新服务器上，原来的老服务器性能更好，我等给他重装一下，专用于部署自己的测试商业项目，实现了个人生活与工作需要的服务器分离。</p><p>哦对了，新房子现在家具都到了，最近收拾一下，跑跑味，结一下尾，明年小家电一买，哎嘿，我和我对象就以火箭般的速度光速入住我的小窝</p><p>总之就是好耶！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当你看到这个文章的时候，我已经从 hexo 换回到 typecho 了，最近发现作者开始更新，版本到 1.2.0 ，普大喜奔🫡&lt;/p&gt;
&lt;p&gt;我花了点时间把之前的博客迁移到了 typecho，以后就用它啦&lt;/p&gt;
&lt;p&gt;另外，最近抢了一台腾讯云的轻量云服务器，333元3年</summary>
      
    
    
    
    <category term="个人" scheme="https://nightingalewk.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
    <category term="迁移" scheme="https://nightingalewk.github.io/tags/%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>laravel blade 简明示例</title>
    <link href="https://nightingalewk.github.io/2022/11/24/49.%20laravel%20blade%20%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/"/>
    <id>https://nightingalewk.github.io/2022/11/24/49.%20laravel%20blade%20%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/</id>
    <published>2022-11-24T08:17:11.000Z</published>
    <updated>2023-11-07T03:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单捯饬一下 laravel 的 blade 使用方法</p><span id="more"></span><p>总之就是，主页面可用：</p><ol><li><code>@yield(&#39;content&#39;)</code> 表示这里后面子页面可以用 <code>@section(&#39;content&#39;) xxxx @endsection</code> 调用；</li><li><code>@include(&#39;layouts._header&#39;)</code> 表示我引用其他的 blade 页面模块到这里。</li></ol><p>子页面可以用：</p><ol><li><code>@extends(&#39;layouts.app&#39;)</code> 表示我要使用这个 blade 模板页面，并在后面对模板传参；</li><li><code>@section(&#39;title&#39;, $user-&gt;name . &#39; 的个人中心&#39;)</code> 表示子页面对 <code>app.blade.php</code> 的一个叫 title 的 yield 传递参数。</li></ol><p>具体代码示例如下：</p><p>主页面 <code>app.balde.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;&#123;&#123; str_replace(&#x27;_&#x27;, &#x27;-&#x27;, app()-&gt;getLocale()) &#125;&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compuiatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;@yield(&#x27;title&#x27;, &#x27;LaraBBS&#x27;) - laravel 进阶教程&lt;/title&gt;</span><br><span class="line">    &lt;!-- CSRF Token --&gt;</span><br><span class="line">    &lt;meta name=&quot;csrf-token&quot; content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;!-- CSS / JS --&gt;</span><br><span class="line">    @vite([&#x27;resources/js/app.js&#x27;])</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot; class=&quot;&#123;&#123; route_class() &#125;&#125;-page&quot;&gt;</span><br><span class="line">        @include(&#x27;layouts._header&#x27;)</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            @include(&#x27;shared._messages&#x27;)</span><br><span class="line">            @yield(&#x27;content&#x27;)</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        @include(&#x27;layouts._footer&#x27;)</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>子页面 <code>show.blade.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@extends(&#x27;layouts.app&#x27;)</span><br><span class="line"></span><br><span class="line">@section(&#x27;title&#x27;, $user-&gt;name . &#x27; 的个人中心&#x27;)</span><br><span class="line"></span><br><span class="line">@section(&#x27;content&#x27;)</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;col-lg-3 col-md-3 hidden-sm hidden-xs user-info&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;card &quot;&gt;</span><br><span class="line">                &lt;img class=&quot;card-img-top&quot;</span><br><span class="line">                    src=&quot;https://cdn.learnku.com/uploads/images/201709/20/1/PtDKbASVcz.png?imageView2/1/w/600/h/600&quot;</span><br><span class="line">                    alt=&quot;&#123;&#123; $user-&gt;name &#125;&#125;&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;h5&gt;&lt;strong&gt;个人简介&lt;/strong&gt;&lt;/h5&gt;</span><br><span class="line">                    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. &lt;/p&gt;</span><br><span class="line">                    &lt;hr&gt;</span><br><span class="line">                    &lt;h5&gt;&lt;strong&gt;注册于&lt;/strong&gt;&lt;/h5&gt;</span><br><span class="line">                    &lt;p&gt;January 01 1901&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-9 col-md-9 col-sm-12 col-xs-12&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;card &quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;h1 class=&quot;mb-0&quot; style=&quot;font-size:22px;&quot;&gt;&#123;&#123; $user-&gt;name &#125;&#125; &lt;small&gt;&#123;&#123; $user-&gt;email &#125;&#125;&lt;/small&gt;&lt;/h1&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">            &#123;&#123;-- 用户发布的内容 --&#125;&#125;</span><br><span class="line">            &lt;div class=&quot;card &quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    暂无数据 ~_~</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">@stop</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单捯饬一下 laravel 的 blade 使用方法&lt;/p&gt;</summary>
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="blade" scheme="https://nightingalewk.github.io/tags/blade/"/>
    
  </entry>
  
  <entry>
    <title>laravel 事件系统简明示例</title>
    <link href="https://nightingalewk.github.io/2022/11/24/48.%20laravel%20%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/"/>
    <id>https://nightingalewk.github.io/2022/11/24/48.%20laravel%20%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/</id>
    <published>2022-11-24T08:17:00.000Z</published>
    <updated>2023-11-07T03:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单对 laravel 事件系统做一些说明</p><span id="more"></span><p>laravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。事件类保存在 app&#x2F;Events 目录中，而这些事件的的监听器则被保存在 app&#x2F;Listeners 目录下。这些目录只有当你使用 Artisan 命令来生成事件和监听器时才会被自动创建。</p><p>事件机制是一种很好的应用解耦方式，因为一个事件可以拥有多个互不依赖的监听器。例如，如果你希望每次订单发货时向用户发送一个 Slack 通知。你可以简单地发起一个 OrderShipped 事件，让监听器接收之后转化成一个 Slack 通知，这样你就可以不用把订单的业务代码跟 Slack 通知的代码耦合在一起了。</p><h2 id="生成一个事件类"><a href="#生成一个事件类" class="headerlink" title="生成一个事件类"></a>生成一个事件类</h2><p>比如通过 artisan 命令生成一个 UserLogin 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:event UserLogin</span><br></pre></td></tr></table></figure><p>在 app&#x2F;Events 中就会自动生成一个 UserLogin.php 文件，内容不多，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Events;</span><br><span class="line"></span><br><span class="line">use Illuminate\Broadcasting\Channel;</span><br><span class="line">use Illuminate\Queue\SerializesModels;</span><br><span class="line">use Illuminate\Broadcasting\PrivateChannel;</span><br><span class="line">use Illuminate\Broadcasting\PresenceChannel;</span><br><span class="line">use Illuminate\Broadcasting\InteractsWithSockets;</span><br><span class="line">use Illuminate\Contracts\Broadcasting\ShouldBroadcast;</span><br><span class="line"></span><br><span class="line">class UserLogin</span><br><span class="line">&#123;</span><br><span class="line">    use InteractsWithSockets, SerializesModels;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create a new event instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the channels the event should broadcast on.</span><br><span class="line">     *</span><br><span class="line">     * @return Channel|array</span><br><span class="line">     */</span><br><span class="line">    public function broadcastOn()</span><br><span class="line">    &#123;</span><br><span class="line">        return new PrivateChannel(&#x27;channel-name&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义监听器"><a href="#定义监听器" class="headerlink" title="定义监听器"></a>定义监听器</h2><p>一个事件可以被一个或多个监听器监听，也就是观察者模式，我们可以定义多个监听器，当这个事件发生，执行一系列逻辑。</p><p>在 EventServiceProvider 的 $listen 中可以定义事件和监听器，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected $listen = [</span><br><span class="line">    &#x27;App\Events\UserLogin&#x27; =&gt; [</span><br><span class="line">        &#x27;App\Lisenter\DoSomething1&#x27;,</span><br><span class="line">        &#x27;App\Lisenter\Dosomething2&#x27;,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后执行 artisan 命令，就可以自动在 app&#x2F;Lisenter 目录生成监听器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan event::generate</span><br></pre></td></tr></table></figure><p>可以看到 app&#x2F;Lisenter 目录多了 DoSomething1.php 和 DoSomething2.php 两个文件，我们看看其中一个内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Lisenter;</span><br><span class="line"></span><br><span class="line">use App\Events\UserLogin;</span><br><span class="line">use Illuminate\Queue\InteractsWithQueue;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldQueue;</span><br><span class="line"></span><br><span class="line">class DoSomething1</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Create the event listener.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Handle the event.</span><br><span class="line">     *</span><br><span class="line">     * @param  UserLogin  $event</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function handle(UserLogin $event)</span><br><span class="line">    &#123;</span><br><span class="line">        info(&#x27;do something1&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个监听器的 handle 方法中我们打印一个日志来测试一下，如代码 handle 方法所示。</p><h2 id="分发和触发事件"><a href="#分发和触发事件" class="headerlink" title="分发和触发事件"></a>分发和触发事件</h2><p>我们在某个控制器的方法中来分发事件，也就是触发事件，看监听器是否正常工作。</p><p>就是一句话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event(new UserLogin());</span><br></pre></td></tr></table></figure><p>然后我们请求这个控制器，观察日志，发现打印了日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2018-06-17 10:04:29] local.INFO: do something1</span><br><span class="line">[2018-06-17 10:04:29] local.INFO: do something2</span><br></pre></td></tr></table></figure><p>那么这个事件 - 监听机制就正常工作了。</p><h1 id="队列异步处理"><a href="#队列异步处理" class="headerlink" title="队列异步处理"></a>队列异步处理</h1><p>如果某个监听器需要执行的操作比较慢，可以放到消息队列进行异步处理。</p><p>比如把上面的 DoSomething1 改成需要放入队列的，只需要 implements ShoulQueue 接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class DoSomething1 implements ShouldQueue</span><br></pre></td></tr></table></figure><p>也可以指定队列驱动，如下代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 任务应该发送到的队列的连接的名称</span><br><span class="line"> *</span><br><span class="line"> * @var string|null</span><br><span class="line"> */</span><br><span class="line">public $connection = &#x27;redis&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 任务应该发送到的队列的名称</span><br><span class="line"> *</span><br><span class="line"> * @var string|null</span><br><span class="line"> */</span><br><span class="line">public $queue = &#x27;listeners&#x27;;</span><br></pre></td></tr></table></figure><p>我们再次执行控制器方法。</p><p>日志里没有打印 do something1，只有 do something2，但是在 redis 队列里发现了一个名为 queues:default 的列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;job&quot;:&quot;Illuminate\\Events\\CallQueuedHandler@call&quot;,&quot;data&quot;:&#123;&quot;class&quot;:&quot;App\\Listener\\DoSomething1&quot;,&quot;method&quot;:&quot;handle&quot;,&quot;data&quot;:&quot;a:1:&#123;i:0;O:20:\&quot;App\\Events\\UserLogin\&quot;:1:&#123;s:6:\&quot;socket\&quot;;N;&#125;&#125;&quot;&#125;,&quot;id&quot;:&quot;3D7VDUwueYGtUvsazicWsifwWQxnnLID&quot;,&quot;attempts&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>这个时候需要使用 php artisan queue:work 执行队列任务，才是真正执行 DoSomething1 这个监听器的 handle 方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单对 laravel 事件系统做一些说明&lt;/p&gt;</summary>
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="事件" scheme="https://nightingalewk.github.io/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>laravel 表单请求验证简明示例</title>
    <link href="https://nightingalewk.github.io/2022/11/24/47.%20laravel%20%E8%A1%A8%E5%8D%95%E8%AF%B7%E6%B1%82%E9%AA%8C%E8%AF%81%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/"/>
    <id>https://nightingalewk.github.io/2022/11/24/47.%20laravel%20%E8%A1%A8%E5%8D%95%E8%AF%B7%E6%B1%82%E9%AA%8C%E8%AF%81%E7%AE%80%E6%98%8E%E7%A4%BA%E4%BE%8B/</id>
    <published>2022-11-24T08:10:00.000Z</published>
    <updated>2023-11-07T03:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单写一下 laravel 表单请求验证使用方法</p><span id="more"></span><p>示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">use App\Http\Requests\UserRequest;</span><br><span class="line"></span><br><span class="line">class UsersController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">    public function update(UserRequest $request, User $user)</span><br><span class="line">    &#123;</span><br><span class="line">        $user-&gt;update($request-&gt;all());</span><br><span class="line">        return redirect()-&gt;route(&#x27;users.show&#x27;, $user-&gt;id)-&gt;with(&#x27;success&#x27;, &#x27;个人资料更新成功！&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实我们将 update 方法中传的第一个参，从 Request 改成 UserRequest 就可以了，系统会在一开始就开始验证，过了再继续之后的步骤。而在此之前，我们需要生成表单请求验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:request UserRequest</span><br></pre></td></tr></table></figure><p>之后我们就可以去修改这个 UserRequest 文件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Requests;</span><br><span class="line"></span><br><span class="line">use Illuminate\Foundation\Http\FormRequest;</span><br><span class="line">use Illuminate\Support\Facades\Auth;</span><br><span class="line"></span><br><span class="line">class UserRequest extends FormRequest</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Determine if the user is authorized to make this request.</span><br><span class="line">     *</span><br><span class="line">     * @return bool</span><br><span class="line">     */</span><br><span class="line">    public function authorize()</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the validation rules that apply to the request.</span><br><span class="line">     *</span><br><span class="line">     * @return array&lt;string, mixed&gt;</span><br><span class="line">     */</span><br><span class="line">    public function rules()</span><br><span class="line">    &#123;</span><br><span class="line">        return [</span><br><span class="line">            &#x27;name&#x27; =&gt; &#x27;required|between:3,25|regex:/^[A-Za-z0-9\-\_]+$/|unique:users,name,&#x27; . Auth::id(),</span><br><span class="line">            &#x27;email&#x27; =&gt; &#x27;required|email&#x27;,</span><br><span class="line">            &#x27;introduction&#x27; =&gt; &#x27;max:80&#x27;,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function messages()</span><br><span class="line">    &#123;</span><br><span class="line">        return [</span><br><span class="line">            &#x27;name.unique&#x27; =&gt; &#x27;用户名已被占用，请重新填写&#x27;,</span><br><span class="line">            &#x27;name.regex&#x27; =&gt; &#x27;用户名只支持英文、数字、横杠和下划线。&#x27;,</span><br><span class="line">            &#x27;name.between&#x27; =&gt; &#x27;用户名必须介于 3 - 25 个字符之间。&#x27;,</span><br><span class="line">            &#x27;name.required&#x27; =&gt; &#x27;用户名不能为空。&#x27;,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单写一下 laravel 表单请求验证使用方法&lt;/p&gt;</summary>
    
    
    
    <category term="laravel" scheme="https://nightingalewk.github.io/categories/laravel/"/>
    
    
    <category term="表单验证" scheme="https://nightingalewk.github.io/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>检测服务端口的方法</title>
    <link href="https://nightingalewk.github.io/2022/11/24/46.%20%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://nightingalewk.github.io/2022/11/24/46.%20%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-11-24T08:10:00.000Z</published>
    <updated>2023-11-07T02:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过以下方法，可查询 win 或 linux 系统中各种服务的端口是多少，方便加入到 zabbix 监管平台中</p><h2 id="1-Linux-系统"><a href="#1-Linux-系统" class="headerlink" title="1. Linux 系统"></a>1. Linux 系统</h2><h3 id="1-1-查询-etc-services-找端口"><a href="#1-1-查询-etc-services-找端口" class="headerlink" title="1.1 查询 &#x2F;etc&#x2F;services 找端口"></a>1.1 查询 &#x2F;etc&#x2F;services 找端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/services | grep postgres</span><br><span class="line"> </span><br><span class="line">postgres 5432/tcp postgresql # POSTGRES</span><br><span class="line"> </span><br><span class="line">postgres 5432/udp postgresql # POSTGRES</span><br></pre></td></tr></table></figure><p>注意：如果用户没有配置services的话，这个方法就无效。</p><h3 id="1-2-netstat-命令查看"><a href="#1-2-netstat-命令查看" class="headerlink" title="1.2 netstat 命令查看"></a>1.2 netstat 命令查看</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># netstat -a | grep PGSQL</span><br><span class="line"> </span><br><span class="line">unix 2 [ ACC ] STREAM LISTENING 12693978 /tmp/.s.PGSQL.5432</span><br></pre></td></tr></table></figure><h2 id="2-Windows-系统"><a href="#2-Windows-系统" class="headerlink" title="2. Windows 系统"></a>2. Windows 系统</h2><p>待补充</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过以下方法，可查询 win 或 linux 系统中各种服务的端口是多少，方便加入到 zabbix 监管平台中&lt;/p&gt;
&lt;h2 id=&quot;1-Linux-系统&quot;&gt;&lt;a href=&quot;#1-Linux-系统&quot; class=&quot;headerlink&quot; title=&quot;1. Linux </summary>
      
    
    
    
    <category term="linux" scheme="https://nightingalewk.github.io/categories/linux/"/>
    
    
    <category term="端口查询" scheme="https://nightingalewk.github.io/tags/%E7%AB%AF%E5%8F%A3%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>解决 swap 占用过高的问题</title>
    <link href="https://nightingalewk.github.io/2022/09/15/45.%20%E8%A7%A3%E5%86%B3%20swap%20%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://nightingalewk.github.io/2022/09/15/45.%20%E8%A7%A3%E5%86%B3%20swap%20%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-09-15T08:56:00.000Z</published>
    <updated>2023-11-07T02:41:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司某项目有 2 个机子的 swap 占满了，监控他们的 zabbix 平台一直提示高占用，于是开始着手解决一下这个问题。</p><p>首先我们释放 swap 存储的文件导内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Swapoff –a</span><br></pre></td></tr></table></figure><p>接下来我们将需要新建一个更大的swap交换空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /var</span><br><span class="line">sudo mkdir swap</span><br><span class="line">sudo dd if=/dev/zero of=swapfile bs=1024 count=4000000</span><br><span class="line">sudo mkswap swapfile</span><br></pre></td></tr></table></figure><p>之后添加自动挂载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line"></span><br><span class="line">最后添加如下信息</span><br><span class="line"></span><br><span class="line">/var/swapfile   swap  swap  defaults  0  0</span><br></pre></td></tr></table></figure><p>至此操作结束</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公司某项目有 2 个机子的 swap 占满了，监控他们的 zabbix 平台一直提示高占用，于是开始着手解决一下这个问题。&lt;/p&gt;
&lt;p&gt;首先我们释放 swap 存储的文件导内存&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    <category term="linux" scheme="https://nightingalewk.github.io/categories/linux/"/>
    
    
    <category term="swap" scheme="https://nightingalewk.github.io/tags/swap/"/>
    
  </entry>
  
  <entry>
    <title>sshpass 中使用 awk 的坑</title>
    <link href="https://nightingalewk.github.io/2022/08/30/43.%20sshpass%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20awk%20%E7%9A%84%E5%9D%91/"/>
    <id>https://nightingalewk.github.io/2022/08/30/43.%20sshpass%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20awk%20%E7%9A%84%E5%9D%91/</id>
    <published>2022-08-30T06:20:00.000Z</published>
    <updated>2023-11-07T02:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在使用ssh远程执行命令，当使用到awk的时候总是报错，而sed和grep都没有问题，以为awk不支持远程执行。最近经过测试找到了解决此问题的方法。</p><p>最近编写公司项目的自动化运维脚本的时候，想在 sshpass 中使用 awk，本机上直接执行无问题，但是在 sshpass 下却一直报语法错误，其原因并非两者不兼容，而是语法问题。</p><span id="more"></span><p>原语句：<code>free -m | sed -n &#39;2p&#39; | awk &#39;&#123;print &quot;Mem used is &quot;$3/$2*100&#125;&#39;</code></p><p>想在 sshpass 中执行正确，就应该把 <code>&amp;</code> 转义，在其前面加上 <code>\</code> 即可，最终结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshpass -p Password ssh root@192.168.1.1 &quot;free -m | sed -n &#x27;2p&#x27; | awk &#x27;&#123;print &quot;Mem used is &quot;\$3/\$2*100&#125;&#x27;&quot; &gt;&gt;test.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前在使用ssh远程执行命令，当使用到awk的时候总是报错，而sed和grep都没有问题，以为awk不支持远程执行。最近经过测试找到了解决此问题的方法。&lt;/p&gt;
&lt;p&gt;最近编写公司项目的自动化运维脚本的时候，想在 sshpass 中使用 awk，本机上直接执行无问题，但是在 sshpass 下却一直报语法错误，其原因并非两者不兼容，而是语法问题。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://nightingalewk.github.io/categories/linux/"/>
    
    
    <category term="sshppass" scheme="https://nightingalewk.github.io/tags/sshppass/"/>
    
    <category term="awk" scheme="https://nightingalewk.github.io/tags/awk/"/>
    
  </entry>
  
</feed>
